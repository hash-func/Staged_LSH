-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- --------------------------------------------------------------------------------
-- Tool Version: Vivado v.2018.3 (lin64) Build 2568420 Fri Jun 14 10:52:08 MDT 2019
-- Date        : Mon Jun 24 16:01:02 2019
-- Host        : xsjlc200241 running 64-bit CentOS Linux release 7.4.1708 (Core)
-- Command     : write_vhdl -force -mode synth_stub -rename_top decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix -prefix
--               decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ pfm_top_dma_pcie_0_stub.vhdl
-- Design      : pfm_top_dma_pcie_0
-- Purpose     : Stub declaration of top-level module interface
-- Device      : xcu200-fsgd2104-2-e
-- --------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix is
  Port ( 
    sys_rst_n : in STD_LOGIC;
    axi_aclk : out STD_LOGIC;
    axi_aresetn : out STD_LOGIC;
    usr_irq_req : in STD_LOGIC_VECTOR ( 15 downto 0 );
    usr_irq_function_number : in STD_LOGIC_VECTOR ( 31 downto 0 );
    usr_irq_ack : out STD_LOGIC_VECTOR ( 15 downto 0 );
    m_axi_awready : in STD_LOGIC;
    m_axi_wready : in STD_LOGIC;
    m_axi_bid : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_bresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_bvalid : in STD_LOGIC;
    m_axi_arready : in STD_LOGIC;
    m_axi_rid : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_rdata : in STD_LOGIC_VECTOR ( 511 downto 0 );
    m_axi_rresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_rlast : in STD_LOGIC;
    m_axi_rvalid : in STD_LOGIC;
    m_axi_awid : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_awaddr : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axi_awlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axi_awsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axi_awburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_awprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axi_awvalid : out STD_LOGIC;
    m_axi_awlock : out STD_LOGIC;
    m_axi_awcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axi_wdata : out STD_LOGIC_VECTOR ( 511 downto 0 );
    m_axi_wstrb : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axi_wlast : out STD_LOGIC;
    m_axi_wvalid : out STD_LOGIC;
    m_axi_bready : out STD_LOGIC;
    m_axi_arid : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_araddr : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axi_arlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axi_arsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axi_arburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axi_arprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axi_arvalid : out STD_LOGIC;
    m_axi_arlock : out STD_LOGIC;
    m_axi_arcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axi_rready : out STD_LOGIC;
    m_axil_awaddr : out STD_LOGIC_VECTOR ( 31 downto 0 );
    m_axil_awuser : out STD_LOGIC_VECTOR ( 10 downto 0 );
    m_axil_awprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axil_awvalid : out STD_LOGIC;
    m_axil_awready : in STD_LOGIC;
    m_axil_wdata : out STD_LOGIC_VECTOR ( 31 downto 0 );
    m_axil_wstrb : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axil_wvalid : out STD_LOGIC;
    m_axil_wready : in STD_LOGIC;
    m_axil_bvalid : in STD_LOGIC;
    m_axil_bresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axil_bready : out STD_LOGIC;
    m_axil_araddr : out STD_LOGIC_VECTOR ( 31 downto 0 );
    m_axil_aruser : out STD_LOGIC_VECTOR ( 10 downto 0 );
    m_axil_arprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axil_arvalid : out STD_LOGIC;
    m_axil_arready : in STD_LOGIC;
    m_axil_rdata : in STD_LOGIC_VECTOR ( 31 downto 0 );
    m_axil_rresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axil_rvalid : in STD_LOGIC;
    m_axil_rready : out STD_LOGIC;
    m_axib_awid : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_awaddr : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axib_awlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axib_awuser : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axib_awsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axib_awburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_awprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axib_awvalid : out STD_LOGIC;
    m_axib_awready : in STD_LOGIC;
    m_axib_awlock : out STD_LOGIC;
    m_axib_awcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axib_wdata : out STD_LOGIC_VECTOR ( 511 downto 0 );
    m_axib_wstrb : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axib_wlast : out STD_LOGIC;
    m_axib_wvalid : out STD_LOGIC;
    m_axib_wready : in STD_LOGIC;
    m_axib_bid : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_bresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_bvalid : in STD_LOGIC;
    m_axib_bready : out STD_LOGIC;
    m_axib_arid : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_araddr : out STD_LOGIC_VECTOR ( 63 downto 0 );
    m_axib_arlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axib_aruser : out STD_LOGIC_VECTOR ( 7 downto 0 );
    m_axib_arsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axib_arburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_arprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
    m_axib_arvalid : out STD_LOGIC;
    m_axib_arready : in STD_LOGIC;
    m_axib_arlock : out STD_LOGIC;
    m_axib_arcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
    m_axib_rid : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_rdata : in STD_LOGIC_VECTOR ( 511 downto 0 );
    m_axib_rresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
    m_axib_rlast : in STD_LOGIC;
    m_axib_rvalid : in STD_LOGIC;
    m_axib_rready : out STD_LOGIC;
    s_axil_awaddr : in STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axil_awprot : in STD_LOGIC_VECTOR ( 2 downto 0 );
    s_axil_awvalid : in STD_LOGIC;
    s_axil_awready : out STD_LOGIC;
    s_axil_wdata : in STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axil_wstrb : in STD_LOGIC_VECTOR ( 3 downto 0 );
    s_axil_wvalid : in STD_LOGIC;
    s_axil_wready : out STD_LOGIC;
    s_axil_bvalid : out STD_LOGIC;
    s_axil_bresp : out STD_LOGIC_VECTOR ( 1 downto 0 );
    s_axil_bready : in STD_LOGIC;
    s_axil_araddr : in STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axil_arprot : in STD_LOGIC_VECTOR ( 2 downto 0 );
    s_axil_arvalid : in STD_LOGIC;
    s_axil_arready : out STD_LOGIC;
    s_axil_rdata : out STD_LOGIC_VECTOR ( 31 downto 0 );
    s_axil_rresp : out STD_LOGIC_VECTOR ( 1 downto 0 );
    s_axil_rvalid : out STD_LOGIC;
    s_axil_rready : in STD_LOGIC;
    interrupt_out : out STD_LOGIC;
    rbar_bar_size_sd : in STD_LOGIC_VECTOR ( 6 downto 0 );
    rbar_function_number_sd : in STD_LOGIC_VECTOR ( 8 downto 0 );
    rbar_write_enable_bar0_sd : in STD_LOGIC;
    rbar_write_enable_bar1_sd : in STD_LOGIC;
    rbar_write_enable_bar2_sd : in STD_LOGIC;
    rbar_write_enable_bar3_sd : in STD_LOGIC;
    rbar_write_enable_bar4_sd : in STD_LOGIC;
    rbar_write_enable_bar5_sd : in STD_LOGIC;
    cfg_ltssm_state_sd : in STD_LOGIC_VECTOR ( 5 downto 0 );
    user_lnk_up_sd : in STD_LOGIC;
    phy_rdy_out_sd : in STD_LOGIC;
    cfg_function_status_sd : in STD_LOGIC_VECTOR ( 15 downto 0 );
    cfg_max_read_req_sd : in STD_LOGIC_VECTOR ( 2 downto 0 );
    cfg_max_payload_sd : in STD_LOGIC_VECTOR ( 1 downto 0 );
    cfg_flr_done_sd : out STD_LOGIC_VECTOR ( 3 downto 0 );
    cfg_flr_in_process_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    s_axis_rq_tdata_sd : out STD_LOGIC_VECTOR ( 511 downto 0 );
    s_axis_rq_tlast_sd : out STD_LOGIC;
    s_axis_rq_tuser_sd : out STD_LOGIC_VECTOR ( 136 downto 0 );
    s_axis_rq_tkeep_sd : out STD_LOGIC_VECTOR ( 15 downto 0 );
    s_axis_rq_tready_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    s_axis_rq_tvalid_sd : out STD_LOGIC;
    m_axis_rc_tdata_sd : in STD_LOGIC_VECTOR ( 511 downto 0 );
    m_axis_rc_tuser_sd : in STD_LOGIC_VECTOR ( 160 downto 0 );
    m_axis_rc_tlast_sd : in STD_LOGIC;
    m_axis_rc_tkeep_sd : in STD_LOGIC_VECTOR ( 15 downto 0 );
    m_axis_rc_tvalid_sd : in STD_LOGIC;
    m_axis_rc_tready_sd : out STD_LOGIC;
    m_axis_cq_tdata_sd : in STD_LOGIC_VECTOR ( 511 downto 0 );
    m_axis_cq_tuser_sd : in STD_LOGIC_VECTOR ( 182 downto 0 );
    m_axis_cq_tlast_sd : in STD_LOGIC;
    m_axis_cq_tkeep_sd : in STD_LOGIC_VECTOR ( 15 downto 0 );
    m_axis_cq_tvalid_sd : in STD_LOGIC;
    m_axis_cq_tready_sd : out STD_LOGIC;
    s_axis_cc_tdata_sd : out STD_LOGIC_VECTOR ( 511 downto 0 );
    s_axis_cc_tuser_sd : out STD_LOGIC_VECTOR ( 80 downto 0 );
    s_axis_cc_tlast_sd : out STD_LOGIC;
    s_axis_cc_tkeep_sd : out STD_LOGIC_VECTOR ( 15 downto 0 );
    s_axis_cc_tvalid_sd : out STD_LOGIC;
    s_axis_cc_tready_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    user_clk_sd : in STD_LOGIC;
    user_reset_sd : in STD_LOGIC;
    pcie_cq_np_req_sd : out STD_LOGIC_VECTOR ( 1 downto 0 );
    pcie_cq_np_req_count_sd : in STD_LOGIC_VECTOR ( 5 downto 0 );
    pcie_tfc_nph_av_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_tfc_npd_av_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    pcie_rq_seq_num_vld0_sd : in STD_LOGIC;
    pcie_rq_seq_num0_sd : in STD_LOGIC_VECTOR ( 5 downto 0 );
    pcie_rq_seq_num_vld1_sd : in STD_LOGIC;
    pcie_rq_seq_num1_sd : in STD_LOGIC_VECTOR ( 5 downto 0 );
    cfg_fc_nph_sd : in STD_LOGIC_VECTOR ( 7 downto 0 );
    cfg_fc_sel_sd : out STD_LOGIC_VECTOR ( 2 downto 0 );
    cfg_phy_link_down_sd : in STD_LOGIC;
    cfg_phy_link_status_sd : in STD_LOGIC_VECTOR ( 1 downto 0 );
    cfg_negotiated_width_sd : in STD_LOGIC_VECTOR ( 2 downto 0 );
    cfg_current_speed_sd : in STD_LOGIC_VECTOR ( 1 downto 0 );
    cfg_pl_status_change_sd : in STD_LOGIC;
    cfg_hot_reset_out_sd : in STD_LOGIC;
    cfg_ds_port_number_sd : out STD_LOGIC_VECTOR ( 7 downto 0 );
    cfg_ds_bus_number_sd : out STD_LOGIC_VECTOR ( 7 downto 0 );
    cfg_ds_device_number_sd : out STD_LOGIC_VECTOR ( 4 downto 0 );
    cfg_ds_function_number_sd : out STD_LOGIC_VECTOR ( 2 downto 0 );
    cfg_err_uncor_in_sd : out STD_LOGIC;
    cfg_err_cor_in_sd : out STD_LOGIC;
    cfg_link_training_enable_sd : out STD_LOGIC;
    cfg_vf_flr_in_process_sd : in STD_LOGIC_VECTOR ( 251 downto 0 );
    cfg_dsn_sd : out STD_LOGIC_VECTOR ( 63 downto 0 );
    cfg_interrupt_int_sd : out STD_LOGIC_VECTOR ( 3 downto 0 );
    cfg_interrupt_sent_sd : in STD_LOGIC;
    cfg_interrupt_pending_sd : out STD_LOGIC_VECTOR ( 3 downto 0 );
    cfg_interrupt_msi_function_number_sd : out STD_LOGIC_VECTOR ( 3 downto 0 );
    cfg_interrupt_msi_sent_sd : in STD_LOGIC;
    cfg_interrupt_msi_fail_sd : in STD_LOGIC;
    cfg_interrupt_msix_int_sd : out STD_LOGIC;
    cfg_interrupt_msix_data_sd : out STD_LOGIC_VECTOR ( 31 downto 0 );
    cfg_interrupt_msix_address_sd : out STD_LOGIC_VECTOR ( 63 downto 0 );
    cfg_interrupt_msix_enable_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    cfg_interrupt_msix_mask_sd : in STD_LOGIC_VECTOR ( 3 downto 0 );
    cfg_interrupt_msix_vf_enable_sd : in STD_LOGIC_VECTOR ( 251 downto 0 );
    cfg_interrupt_msix_vf_mask_sd : in STD_LOGIC_VECTOR ( 251 downto 0 );
    cfg_err_cor_out_sd : in STD_LOGIC;
    cfg_err_nonfatal_out_sd : in STD_LOGIC;
    cfg_err_fatal_out_sd : in STD_LOGIC;
    cfg_local_error_out_sd : in STD_LOGIC_VECTOR ( 4 downto 0 );
    cfg_msg_received_sd : in STD_LOGIC;
    cfg_msg_received_data_sd : in STD_LOGIC_VECTOR ( 7 downto 0 );
    cfg_msg_received_type_sd : in STD_LOGIC_VECTOR ( 4 downto 0 );
    cfg_msg_transmit_sd : out STD_LOGIC;
    cfg_msg_transmit_type_sd : out STD_LOGIC_VECTOR ( 2 downto 0 );
    cfg_msg_transmit_data_sd : out STD_LOGIC_VECTOR ( 31 downto 0 );
    cfg_msg_transmit_done_sd : in STD_LOGIC
  );

end decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix;

architecture stub of decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix is
attribute syn_black_box : boolean;
attribute black_box_pad_pin : string;
attribute syn_black_box of stub : architecture is true;
attribute black_box_pad_pin of stub : architecture is "sys_rst_n,axi_aclk,axi_aresetn,usr_irq_req[15:0],usr_irq_function_number[31:0],usr_irq_ack[15:0],m_axi_awready,m_axi_wready,m_axi_bid[1:0],m_axi_bresp[1:0],m_axi_bvalid,m_axi_arready,m_axi_rid[1:0],m_axi_rdata[511:0],m_axi_rresp[1:0],m_axi_rlast,m_axi_rvalid,m_axi_awid[1:0],m_axi_awaddr[63:0],m_axi_awlen[7:0],m_axi_awsize[2:0],m_axi_awburst[1:0],m_axi_awprot[2:0],m_axi_awvalid,m_axi_awlock,m_axi_awcache[3:0],m_axi_wdata[511:0],m_axi_wstrb[63:0],m_axi_wlast,m_axi_wvalid,m_axi_bready,m_axi_arid[1:0],m_axi_araddr[63:0],m_axi_arlen[7:0],m_axi_arsize[2:0],m_axi_arburst[1:0],m_axi_arprot[2:0],m_axi_arvalid,m_axi_arlock,m_axi_arcache[3:0],m_axi_rready,m_axil_awaddr[31:0],m_axil_awuser[10:0],m_axil_awprot[2:0],m_axil_awvalid,m_axil_awready,m_axil_wdata[31:0],m_axil_wstrb[3:0],m_axil_wvalid,m_axil_wready,m_axil_bvalid,m_axil_bresp[1:0],m_axil_bready,m_axil_araddr[31:0],m_axil_aruser[10:0],m_axil_arprot[2:0],m_axil_arvalid,m_axil_arready,m_axil_rdata[31:0],m_axil_rresp[1:0],m_axil_rvalid,m_axil_rready,m_axib_awid[1:0],m_axib_awaddr[63:0],m_axib_awlen[7:0],m_axib_awuser[7:0],m_axib_awsize[2:0],m_axib_awburst[1:0],m_axib_awprot[2:0],m_axib_awvalid,m_axib_awready,m_axib_awlock,m_axib_awcache[3:0],m_axib_wdata[511:0],m_axib_wstrb[63:0],m_axib_wlast,m_axib_wvalid,m_axib_wready,m_axib_bid[1:0],m_axib_bresp[1:0],m_axib_bvalid,m_axib_bready,m_axib_arid[1:0],m_axib_araddr[63:0],m_axib_arlen[7:0],m_axib_aruser[7:0],m_axib_arsize[2:0],m_axib_arburst[1:0],m_axib_arprot[2:0],m_axib_arvalid,m_axib_arready,m_axib_arlock,m_axib_arcache[3:0],m_axib_rid[1:0],m_axib_rdata[511:0],m_axib_rresp[1:0],m_axib_rlast,m_axib_rvalid,m_axib_rready,s_axil_awaddr[31:0],s_axil_awprot[2:0],s_axil_awvalid,s_axil_awready,s_axil_wdata[31:0],s_axil_wstrb[3:0],s_axil_wvalid,s_axil_wready,s_axil_bvalid,s_axil_bresp[1:0],s_axil_bready,s_axil_araddr[31:0],s_axil_arprot[2:0],s_axil_arvalid,s_axil_arready,s_axil_rdata[31:0],s_axil_rresp[1:0],s_axil_rvalid,s_axil_rready,interrupt_out,rbar_bar_size_sd[6:0],rbar_function_number_sd[8:0],rbar_write_enable_bar0_sd,rbar_write_enable_bar1_sd,rbar_write_enable_bar2_sd,rbar_write_enable_bar3_sd,rbar_write_enable_bar4_sd,rbar_write_enable_bar5_sd,cfg_ltssm_state_sd[5:0],user_lnk_up_sd,phy_rdy_out_sd,cfg_function_status_sd[15:0],cfg_max_read_req_sd[2:0],cfg_max_payload_sd[1:0],cfg_flr_done_sd[3:0],cfg_flr_in_process_sd[3:0],s_axis_rq_tdata_sd[511:0],s_axis_rq_tlast_sd,s_axis_rq_tuser_sd[136:0],s_axis_rq_tkeep_sd[15:0],s_axis_rq_tready_sd[3:0],s_axis_rq_tvalid_sd,m_axis_rc_tdata_sd[511:0],m_axis_rc_tuser_sd[160:0],m_axis_rc_tlast_sd,m_axis_rc_tkeep_sd[15:0],m_axis_rc_tvalid_sd,m_axis_rc_tready_sd,m_axis_cq_tdata_sd[511:0],m_axis_cq_tuser_sd[182:0],m_axis_cq_tlast_sd,m_axis_cq_tkeep_sd[15:0],m_axis_cq_tvalid_sd,m_axis_cq_tready_sd,s_axis_cc_tdata_sd[511:0],s_axis_cc_tuser_sd[80:0],s_axis_cc_tlast_sd,s_axis_cc_tkeep_sd[15:0],s_axis_cc_tvalid_sd,s_axis_cc_tready_sd[3:0],user_clk_sd,user_reset_sd,pcie_cq_np_req_sd[1:0],pcie_cq_np_req_count_sd[5:0],pcie_tfc_nph_av_sd[3:0],pcie_tfc_npd_av_sd[3:0],pcie_rq_seq_num_vld0_sd,pcie_rq_seq_num0_sd[5:0],pcie_rq_seq_num_vld1_sd,pcie_rq_seq_num1_sd[5:0],cfg_fc_nph_sd[7:0],cfg_fc_sel_sd[2:0],cfg_phy_link_down_sd,cfg_phy_link_status_sd[1:0],cfg_negotiated_width_sd[2:0],cfg_current_speed_sd[1:0],cfg_pl_status_change_sd,cfg_hot_reset_out_sd,cfg_ds_port_number_sd[7:0],cfg_ds_bus_number_sd[7:0],cfg_ds_device_number_sd[4:0],cfg_ds_function_number_sd[2:0],cfg_err_uncor_in_sd,cfg_err_cor_in_sd,cfg_link_training_enable_sd,cfg_vf_flr_in_process_sd[251:0],cfg_dsn_sd[63:0],cfg_interrupt_int_sd[3:0],cfg_interrupt_sent_sd,cfg_interrupt_pending_sd[3:0],cfg_interrupt_msi_function_number_sd[3:0],cfg_interrupt_msi_sent_sd,cfg_interrupt_msi_fail_sd,cfg_interrupt_msix_int_sd,cfg_interrupt_msix_data_sd[31:0],cfg_interrupt_msix_address_sd[63:0],cfg_interrupt_msix_enable_sd[3:0],cfg_interrupt_msix_mask_sd[3:0],cfg_interrupt_msix_vf_enable_sd[251:0],cfg_interrupt_msix_vf_mask_sd[251:0],cfg_err_cor_out_sd,cfg_err_nonfatal_out_sd,cfg_err_fatal_out_sd,cfg_local_error_out_sd[4:0],cfg_msg_received_sd,cfg_msg_received_data_sd[7:0],cfg_msg_received_type_sd[4:0],cfg_msg_transmit_sd,cfg_msg_transmit_type_sd[2:0],cfg_msg_transmit_data_sd[31:0],cfg_msg_transmit_done_sd";
attribute X_CORE_INFO : string;
attribute X_CORE_INFO of stub : architecture is "pfm_top_dma_pcie_0_core_top,Vivado 2018.3";
begin
end;
