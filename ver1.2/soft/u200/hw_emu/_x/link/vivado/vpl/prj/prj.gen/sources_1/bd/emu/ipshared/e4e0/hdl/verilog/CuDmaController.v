// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CuDmaController,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flvb2104-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1841,HLS_SYN_LUT=3080}" *)

module CuDmaController (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_CQDma_AWVALID,
        m_axi_CQDma_AWREADY,
        m_axi_CQDma_AWADDR,
        m_axi_CQDma_AWID,
        m_axi_CQDma_AWLEN,
        m_axi_CQDma_AWSIZE,
        m_axi_CQDma_AWBURST,
        m_axi_CQDma_AWLOCK,
        m_axi_CQDma_AWCACHE,
        m_axi_CQDma_AWPROT,
        m_axi_CQDma_AWQOS,
        m_axi_CQDma_AWREGION,
        m_axi_CQDma_AWUSER,
        m_axi_CQDma_WVALID,
        m_axi_CQDma_WREADY,
        m_axi_CQDma_WDATA,
        m_axi_CQDma_WSTRB,
        m_axi_CQDma_WLAST,
        m_axi_CQDma_WID,
        m_axi_CQDma_WUSER,
        m_axi_CQDma_ARVALID,
        m_axi_CQDma_ARREADY,
        m_axi_CQDma_ARADDR,
        m_axi_CQDma_ARID,
        m_axi_CQDma_ARLEN,
        m_axi_CQDma_ARSIZE,
        m_axi_CQDma_ARBURST,
        m_axi_CQDma_ARLOCK,
        m_axi_CQDma_ARCACHE,
        m_axi_CQDma_ARPROT,
        m_axi_CQDma_ARQOS,
        m_axi_CQDma_ARREGION,
        m_axi_CQDma_ARUSER,
        m_axi_CQDma_RVALID,
        m_axi_CQDma_RREADY,
        m_axi_CQDma_RDATA,
        m_axi_CQDma_RLAST,
        m_axi_CQDma_RID,
        m_axi_CQDma_RUSER,
        m_axi_CQDma_RRESP,
        m_axi_CQDma_BVALID,
        m_axi_CQDma_BREADY,
        m_axi_CQDma_BRESP,
        m_axi_CQDma_BID,
        m_axi_CQDma_BUSER,
        m_axi_CUDma_AWVALID,
        m_axi_CUDma_AWREADY,
        m_axi_CUDma_AWADDR,
        m_axi_CUDma_AWID,
        m_axi_CUDma_AWLEN,
        m_axi_CUDma_AWSIZE,
        m_axi_CUDma_AWBURST,
        m_axi_CUDma_AWLOCK,
        m_axi_CUDma_AWCACHE,
        m_axi_CUDma_AWPROT,
        m_axi_CUDma_AWQOS,
        m_axi_CUDma_AWREGION,
        m_axi_CUDma_AWUSER,
        m_axi_CUDma_WVALID,
        m_axi_CUDma_WREADY,
        m_axi_CUDma_WDATA,
        m_axi_CUDma_WSTRB,
        m_axi_CUDma_WLAST,
        m_axi_CUDma_WID,
        m_axi_CUDma_WUSER,
        m_axi_CUDma_ARVALID,
        m_axi_CUDma_ARREADY,
        m_axi_CUDma_ARADDR,
        m_axi_CUDma_ARID,
        m_axi_CUDma_ARLEN,
        m_axi_CUDma_ARSIZE,
        m_axi_CUDma_ARBURST,
        m_axi_CUDma_ARLOCK,
        m_axi_CUDma_ARCACHE,
        m_axi_CUDma_ARPROT,
        m_axi_CUDma_ARQOS,
        m_axi_CUDma_ARREGION,
        m_axi_CUDma_ARUSER,
        m_axi_CUDma_RVALID,
        m_axi_CUDma_RREADY,
        m_axi_CUDma_RDATA,
        m_axi_CUDma_RLAST,
        m_axi_CUDma_RID,
        m_axi_CUDma_RUSER,
        m_axi_CUDma_RRESP,
        m_axi_CUDma_BVALID,
        m_axi_CUDma_BREADY,
        m_axi_CUDma_BRESP,
        m_axi_CUDma_BID,
        m_axi_CUDma_BUSER,
        CuDmaQueue,
        SlotSize,
        CuOffset,
        NoOfSlots,
        CuBaseAddress,
        CqBaseAddress
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_pp0_stage0 = 37'd536870912;
parameter    ap_ST_fsm_state33 = 37'd1073741824;
parameter    ap_ST_fsm_state34 = 37'd2147483648;
parameter    ap_ST_fsm_state35 = 37'd4294967296;
parameter    ap_ST_fsm_state36 = 37'd8589934592;
parameter    ap_ST_fsm_state37 = 37'd17179869184;
parameter    ap_ST_fsm_state38 = 37'd34359738368;
parameter    ap_ST_fsm_state39 = 37'd68719476736;
parameter    C_M_AXI_CQDMA_ID_WIDTH = 1;
parameter    C_M_AXI_CQDMA_ADDR_WIDTH = 32;
parameter    C_M_AXI_CQDMA_DATA_WIDTH = 32;
parameter    C_M_AXI_CQDMA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CQDMA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CQDMA_WUSER_WIDTH = 1;
parameter    C_M_AXI_CQDMA_RUSER_WIDTH = 1;
parameter    C_M_AXI_CQDMA_BUSER_WIDTH = 1;
parameter    C_M_AXI_CQDMA_TARGET_ADDR = 0;
parameter    C_M_AXI_CQDMA_USER_VALUE = 0;
parameter    C_M_AXI_CQDMA_PROT_VALUE = 0;
parameter    C_M_AXI_CQDMA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CUDMA_ID_WIDTH = 1;
parameter    C_M_AXI_CUDMA_ADDR_WIDTH = 32;
parameter    C_M_AXI_CUDMA_DATA_WIDTH = 32;
parameter    C_M_AXI_CUDMA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CUDMA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CUDMA_WUSER_WIDTH = 1;
parameter    C_M_AXI_CUDMA_RUSER_WIDTH = 1;
parameter    C_M_AXI_CUDMA_BUSER_WIDTH = 1;
parameter    C_M_AXI_CUDMA_TARGET_ADDR = 0;
parameter    C_M_AXI_CUDMA_USER_VALUE = 0;
parameter    C_M_AXI_CUDMA_PROT_VALUE = 0;
parameter    C_M_AXI_CUDMA_CACHE_VALUE = 3;

parameter C_M_AXI_CQDMA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CUDMA_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_CQDma_AWVALID;
input   m_axi_CQDma_AWREADY;
output  [C_M_AXI_CQDMA_ADDR_WIDTH - 1:0] m_axi_CQDma_AWADDR;
output  [C_M_AXI_CQDMA_ID_WIDTH - 1:0] m_axi_CQDma_AWID;
output  [7:0] m_axi_CQDma_AWLEN;
output  [2:0] m_axi_CQDma_AWSIZE;
output  [1:0] m_axi_CQDma_AWBURST;
output  [1:0] m_axi_CQDma_AWLOCK;
output  [3:0] m_axi_CQDma_AWCACHE;
output  [2:0] m_axi_CQDma_AWPROT;
output  [3:0] m_axi_CQDma_AWQOS;
output  [3:0] m_axi_CQDma_AWREGION;
output  [C_M_AXI_CQDMA_AWUSER_WIDTH - 1:0] m_axi_CQDma_AWUSER;
output   m_axi_CQDma_WVALID;
input   m_axi_CQDma_WREADY;
output  [C_M_AXI_CQDMA_DATA_WIDTH - 1:0] m_axi_CQDma_WDATA;
output  [C_M_AXI_CQDMA_WSTRB_WIDTH - 1:0] m_axi_CQDma_WSTRB;
output   m_axi_CQDma_WLAST;
output  [C_M_AXI_CQDMA_ID_WIDTH - 1:0] m_axi_CQDma_WID;
output  [C_M_AXI_CQDMA_WUSER_WIDTH - 1:0] m_axi_CQDma_WUSER;
output   m_axi_CQDma_ARVALID;
input   m_axi_CQDma_ARREADY;
output  [C_M_AXI_CQDMA_ADDR_WIDTH - 1:0] m_axi_CQDma_ARADDR;
output  [C_M_AXI_CQDMA_ID_WIDTH - 1:0] m_axi_CQDma_ARID;
output  [7:0] m_axi_CQDma_ARLEN;
output  [2:0] m_axi_CQDma_ARSIZE;
output  [1:0] m_axi_CQDma_ARBURST;
output  [1:0] m_axi_CQDma_ARLOCK;
output  [3:0] m_axi_CQDma_ARCACHE;
output  [2:0] m_axi_CQDma_ARPROT;
output  [3:0] m_axi_CQDma_ARQOS;
output  [3:0] m_axi_CQDma_ARREGION;
output  [C_M_AXI_CQDMA_ARUSER_WIDTH - 1:0] m_axi_CQDma_ARUSER;
input   m_axi_CQDma_RVALID;
output   m_axi_CQDma_RREADY;
input  [C_M_AXI_CQDMA_DATA_WIDTH - 1:0] m_axi_CQDma_RDATA;
input   m_axi_CQDma_RLAST;
input  [C_M_AXI_CQDMA_ID_WIDTH - 1:0] m_axi_CQDma_RID;
input  [C_M_AXI_CQDMA_RUSER_WIDTH - 1:0] m_axi_CQDma_RUSER;
input  [1:0] m_axi_CQDma_RRESP;
input   m_axi_CQDma_BVALID;
output   m_axi_CQDma_BREADY;
input  [1:0] m_axi_CQDma_BRESP;
input  [C_M_AXI_CQDMA_ID_WIDTH - 1:0] m_axi_CQDma_BID;
input  [C_M_AXI_CQDMA_BUSER_WIDTH - 1:0] m_axi_CQDma_BUSER;
output   m_axi_CUDma_AWVALID;
input   m_axi_CUDma_AWREADY;
output  [C_M_AXI_CUDMA_ADDR_WIDTH - 1:0] m_axi_CUDma_AWADDR;
output  [C_M_AXI_CUDMA_ID_WIDTH - 1:0] m_axi_CUDma_AWID;
output  [7:0] m_axi_CUDma_AWLEN;
output  [2:0] m_axi_CUDma_AWSIZE;
output  [1:0] m_axi_CUDma_AWBURST;
output  [1:0] m_axi_CUDma_AWLOCK;
output  [3:0] m_axi_CUDma_AWCACHE;
output  [2:0] m_axi_CUDma_AWPROT;
output  [3:0] m_axi_CUDma_AWQOS;
output  [3:0] m_axi_CUDma_AWREGION;
output  [C_M_AXI_CUDMA_AWUSER_WIDTH - 1:0] m_axi_CUDma_AWUSER;
output   m_axi_CUDma_WVALID;
input   m_axi_CUDma_WREADY;
output  [C_M_AXI_CUDMA_DATA_WIDTH - 1:0] m_axi_CUDma_WDATA;
output  [C_M_AXI_CUDMA_WSTRB_WIDTH - 1:0] m_axi_CUDma_WSTRB;
output   m_axi_CUDma_WLAST;
output  [C_M_AXI_CUDMA_ID_WIDTH - 1:0] m_axi_CUDma_WID;
output  [C_M_AXI_CUDMA_WUSER_WIDTH - 1:0] m_axi_CUDma_WUSER;
output   m_axi_CUDma_ARVALID;
input   m_axi_CUDma_ARREADY;
output  [C_M_AXI_CUDMA_ADDR_WIDTH - 1:0] m_axi_CUDma_ARADDR;
output  [C_M_AXI_CUDMA_ID_WIDTH - 1:0] m_axi_CUDma_ARID;
output  [7:0] m_axi_CUDma_ARLEN;
output  [2:0] m_axi_CUDma_ARSIZE;
output  [1:0] m_axi_CUDma_ARBURST;
output  [1:0] m_axi_CUDma_ARLOCK;
output  [3:0] m_axi_CUDma_ARCACHE;
output  [2:0] m_axi_CUDma_ARPROT;
output  [3:0] m_axi_CUDma_ARQOS;
output  [3:0] m_axi_CUDma_ARREGION;
output  [C_M_AXI_CUDMA_ARUSER_WIDTH - 1:0] m_axi_CUDma_ARUSER;
input   m_axi_CUDma_RVALID;
output   m_axi_CUDma_RREADY;
input  [C_M_AXI_CUDMA_DATA_WIDTH - 1:0] m_axi_CUDma_RDATA;
input   m_axi_CUDma_RLAST;
input  [C_M_AXI_CUDMA_ID_WIDTH - 1:0] m_axi_CUDma_RID;
input  [C_M_AXI_CUDMA_RUSER_WIDTH - 1:0] m_axi_CUDma_RUSER;
input  [1:0] m_axi_CUDma_RRESP;
input   m_axi_CUDma_BVALID;
output   m_axi_CUDma_BREADY;
input  [1:0] m_axi_CUDma_BRESP;
input  [C_M_AXI_CUDMA_ID_WIDTH - 1:0] m_axi_CUDma_BID;
input  [C_M_AXI_CUDMA_BUSER_WIDTH - 1:0] m_axi_CUDma_BUSER;
input  [127:0] CuDmaQueue;
input  [12:0] SlotSize;
input  [5:0] CuOffset;
input  [7:0] NoOfSlots;
input  [31:0] CuBaseAddress;
input  [31:0] CqBaseAddress;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    CQDma_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    CQDma_blk_n_R;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_9_fu_545_p2;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_32_reg_1151;
reg    CUDma_blk_n_AW;
wire    ap_CS_fsm_state29;
reg    CUDma_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_tmp_32_reg_1151;
reg    CUDma_blk_n_B;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state39;
reg   [0:0] bit_reg_994;
wire    CQDma_AWREADY;
wire    CQDma_WREADY;
reg    CQDma_ARVALID;
wire    CQDma_ARREADY;
reg   [31:0] CQDma_ARADDR;
reg   [31:0] CQDma_ARLEN;
wire    CQDma_RVALID;
reg    CQDma_RREADY;
wire   [31:0] CQDma_RDATA;
wire    CQDma_RLAST;
wire   [0:0] CQDma_RID;
wire   [0:0] CQDma_RUSER;
wire   [1:0] CQDma_RRESP;
wire    CQDma_BVALID;
wire   [1:0] CQDma_BRESP;
wire   [0:0] CQDma_BID;
wire   [0:0] CQDma_BUSER;
reg    CUDma_AWVALID;
wire    CUDma_AWREADY;
reg   [31:0] CUDma_AWADDR;
reg   [31:0] CUDma_AWLEN;
reg    CUDma_WVALID;
wire    CUDma_WREADY;
reg   [31:0] CUDma_WDATA;
wire    CUDma_ARREADY;
wire    CUDma_RVALID;
wire   [31:0] CUDma_RDATA;
wire    CUDma_RLAST;
wire   [0:0] CUDma_RID;
wire   [0:0] CUDma_RUSER;
wire   [1:0] CUDma_RRESP;
wire    CUDma_BVALID;
reg    CUDma_BREADY;
wire   [1:0] CUDma_BRESP;
wire   [0:0] CUDma_BID;
wire   [0:0] CUDma_BUSER;
reg   [7:0] l_reg_333;
wire   [7:0] i_1_fu_415_p2;
reg   [7:0] i_1_reg_989;
wire    ap_CS_fsm_state3;
wire   [0:0] bit_fu_435_p1;
wire   [0:0] tmp_3_fu_409_p2;
wire   [31:0] SlotBaseAddr_fu_439_p2;
reg   [31:0] SlotBaseAddr_reg_998;
reg    ap_sig_ioackin_CQDma_ARREADY;
reg   [31:0] header_reg_1011;
reg   [7:0] payload_reg_1016;
reg   [1:0] noofcumasksread_tmp_reg_1021;
wire   [2:0] noofcumasksread_fu_487_p2;
reg   [2:0] noofcumasksread_reg_1027;
wire    ap_CS_fsm_state12;
wire   [7:0] payload_1_fu_511_p2;
reg   [7:0] payload_1_reg_1036;
wire   [31:0] tmp_s_fu_516_p2;
reg   [31:0] tmp_s_reg_1042;
wire   [31:0] tmp_7_fu_531_p1;
wire   [3:0] tmp_2_cast_fu_535_p1;
reg   [3:0] tmp_2_cast_reg_1058;
wire    ap_CS_fsm_state19;
wire   [8:0] tmp_10_cast_fu_538_p1;
reg   [8:0] tmp_10_cast_reg_1064;
wire   [2:0] j_1_fu_550_p2;
reg   [2:0] j_1_reg_1072;
reg    ap_block_state20;
reg   [31:0] cubitmask_3_10_reg_1077;
wire   [1:0] tmp_fu_556_p1;
reg   [1:0] tmp_reg_1085;
wire   [7:0] idxloopcount_4_fu_649_p3;
reg   [7:0] idxloopcount_4_reg_1092;
wire   [8:0] tmp_20_cast_fu_657_p1;
reg   [8:0] tmp_20_cast_reg_1097;
wire  signed [31:0] tmp_16_fu_754_p1;
reg  signed [31:0] tmp_16_reg_1102;
wire    ap_CS_fsm_state22;
wire   [7:0] k_1_fu_767_p2;
wire   [31:0] tmp_27_fu_816_p2;
reg   [31:0] tmp_27_reg_1118;
wire   [0:0] tmp_17_fu_762_p2;
wire   [0:0] idxbit_fu_803_p1;
wire   [31:0] tmp_31_fu_831_p1;
reg   [31:0] tmp_31_reg_1129;
wire   [31:0] tmp_24_fu_858_p2;
reg   [31:0] tmp_24_reg_1135;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_29_fu_864_p2;
reg   [31:0] tmp_29_reg_1140;
reg    ap_sig_ioackin_CUDma_AWREADY;
wire   [0:0] tmp_32_fu_884_p2;
wire    ap_block_state30_pp0_stage0_iter0;
reg    ap_block_state31_pp0_stage0_iter1;
wire    ap_block_state32_pp0_stage0_iter2;
reg    ap_sig_ioackin_CUDma_WREADY;
reg    ap_block_state32_io;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] l_1_fu_889_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] CQDma_addr_2_read_reg_1160;
wire   [31:0] SlotOffset_n_1_fu_913_p2;
reg    ap_block_state39;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state30;
reg   [31:0] SlotOffset_n_reg_288;
wire    ap_CS_fsm_state2;
reg   [7:0] i_reg_300;
reg   [2:0] j_reg_311;
wire    ap_CS_fsm_state21;
reg   [7:0] k_reg_322;
wire   [63:0] tmp_8_fu_445_p1;
wire   [63:0] tmp_2_fu_521_p1;
wire   [63:0] tmp_28_fu_821_p1;
wire   [63:0] tmp_30_fu_870_p1;
wire   [63:0] tmp_34_fu_895_p1;
reg    ap_reg_ioackin_CQDma_ARREADY;
reg    ap_reg_ioackin_CUDma_AWREADY;
reg    ap_reg_ioackin_CUDma_WREADY;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] cubitmask_3_1_fu_142;
wire   [31:0] cubitmask_3_8_fu_727_p3;
reg   [31:0] cubitmask_3_3_fu_146;
wire   [31:0] cubitmask_3_6_fu_719_p3;
reg   [31:0] cubitmask_3_4_fu_150;
wire   [31:0] cubitmask_3_2_fu_704_p3;
reg   [31:0] cubitmask_3_7_fu_154;
wire   [31:0] cubitmask_3_fu_689_p3;
reg   [7:0] idxloopcount_fu_158;
reg   [127:0] CuDmaQueue_assign_fu_162;
reg   [12:0] SlotSize_assign_fu_166;
reg   [5:0] CuOffset_assign_fu_170;
reg   [7:0] NoOfSlots_assign_fu_174;
reg   [31:0] CuBaseAddress_assign_fu_178;
reg   [31:0] CqBaseAddress_assign_fu_182;
wire  signed [31:0] tmp_4_fu_421_p1;
wire   [127:0] tmp_5_fu_425_p1;
wire   [127:0] tmp_6_fu_429_p2;
wire   [2:0] noofcumasksread_tmp_s_fu_484_p1;
wire   [7:0] tmp_1_fu_475_p4;
wire   [7:0] p_not_fu_493_p2;
wire   [7:0] p_neg_fu_499_p2;
wire   [7:0] tmp1_fu_505_p2;
wire  signed [3:0] tmp_11_cast_fu_541_p1;
wire   [0:0] tmp_10_fu_563_p2;
wire   [0:0] tmp_13_fu_578_p2;
wire   [0:0] tmp_14_fu_591_p2;
wire   [7:0] p_idxloopcount_fu_583_p3;
wire   [0:0] tmp_11_fu_568_p2;
wire   [0:0] sel_tmp3_fu_605_p2;
wire   [0:0] sel_tmp35_demorgan_fu_617_p2;
wire   [0:0] tmp_12_fu_573_p2;
wire   [0:0] sel_tmp5_fu_623_p2;
wire   [0:0] sel_tmp7_fu_629_p2;
wire   [0:0] sel_tmp4_fu_611_p2;
wire   [0:0] tmp_15_fu_643_p2;
wire   [7:0] sel_tmp9_cast_fu_635_p3;
wire   [7:0] sel_tmp2_fu_597_p3;
wire   [0:0] sel_tmp8_fu_671_p2;
wire   [0:0] sel_tmp6_fu_666_p2;
wire   [0:0] sel_tmp_fu_661_p2;
wire   [0:0] or_cond_fu_676_p2;
wire   [31:0] newSel_fu_682_p3;
wire   [31:0] newSel2_fu_697_p3;
wire   [31:0] cubitmask_3_5_fu_712_p3;
wire  signed [8:0] tmp_21_cast_fu_758_p1;
wire   [1:0] tmp_18_fu_783_p5;
wire   [31:0] tmp_18_fu_783_p6;
wire   [31:0] tmp_19_fu_797_p2;
wire   [3:0] tmp_25_fu_807_p2;
wire   [31:0] tmp_26_fu_812_p1;
wire  signed [31:0] tmp_20_fu_835_p1;
wire   [31:0] tmp_21_fu_839_p2;
wire   [29:0] tmp_22_fu_844_p4;
wire  signed [31:0] tmp_23_fu_854_p1;
wire  signed [8:0] tmp_31_cast_fu_880_p1;
wire  signed [31:0] tmp_35_fu_909_p1;
reg   [36:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_633;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_CQDma_ARREADY = 1'b0;
#0 ap_reg_ioackin_CUDma_AWREADY = 1'b0;
#0 ap_reg_ioackin_CUDma_WREADY = 1'b0;
end

CuDmaController_CQDma_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CQDMA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CQDMA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CQDMA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CQDMA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CQDMA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CQDMA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CQDMA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CQDMA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_CQDMA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_CQDMA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CQDMA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CQDMA_CACHE_VALUE ))
CuDmaController_CQDma_m_axi_U(
    .AWVALID(m_axi_CQDma_AWVALID),
    .AWREADY(m_axi_CQDma_AWREADY),
    .AWADDR(m_axi_CQDma_AWADDR),
    .AWID(m_axi_CQDma_AWID),
    .AWLEN(m_axi_CQDma_AWLEN),
    .AWSIZE(m_axi_CQDma_AWSIZE),
    .AWBURST(m_axi_CQDma_AWBURST),
    .AWLOCK(m_axi_CQDma_AWLOCK),
    .AWCACHE(m_axi_CQDma_AWCACHE),
    .AWPROT(m_axi_CQDma_AWPROT),
    .AWQOS(m_axi_CQDma_AWQOS),
    .AWREGION(m_axi_CQDma_AWREGION),
    .AWUSER(m_axi_CQDma_AWUSER),
    .WVALID(m_axi_CQDma_WVALID),
    .WREADY(m_axi_CQDma_WREADY),
    .WDATA(m_axi_CQDma_WDATA),
    .WSTRB(m_axi_CQDma_WSTRB),
    .WLAST(m_axi_CQDma_WLAST),
    .WID(m_axi_CQDma_WID),
    .WUSER(m_axi_CQDma_WUSER),
    .ARVALID(m_axi_CQDma_ARVALID),
    .ARREADY(m_axi_CQDma_ARREADY),
    .ARADDR(m_axi_CQDma_ARADDR),
    .ARID(m_axi_CQDma_ARID),
    .ARLEN(m_axi_CQDma_ARLEN),
    .ARSIZE(m_axi_CQDma_ARSIZE),
    .ARBURST(m_axi_CQDma_ARBURST),
    .ARLOCK(m_axi_CQDma_ARLOCK),
    .ARCACHE(m_axi_CQDma_ARCACHE),
    .ARPROT(m_axi_CQDma_ARPROT),
    .ARQOS(m_axi_CQDma_ARQOS),
    .ARREGION(m_axi_CQDma_ARREGION),
    .ARUSER(m_axi_CQDma_ARUSER),
    .RVALID(m_axi_CQDma_RVALID),
    .RREADY(m_axi_CQDma_RREADY),
    .RDATA(m_axi_CQDma_RDATA),
    .RLAST(m_axi_CQDma_RLAST),
    .RID(m_axi_CQDma_RID),
    .RUSER(m_axi_CQDma_RUSER),
    .RRESP(m_axi_CQDma_RRESP),
    .BVALID(m_axi_CQDma_BVALID),
    .BREADY(m_axi_CQDma_BREADY),
    .BRESP(m_axi_CQDma_BRESP),
    .BID(m_axi_CQDma_BID),
    .BUSER(m_axi_CQDma_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(CQDma_ARVALID),
    .I_ARREADY(CQDma_ARREADY),
    .I_ARADDR(CQDma_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(CQDma_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(CQDma_RVALID),
    .I_RREADY(CQDma_RREADY),
    .I_RDATA(CQDma_RDATA),
    .I_RID(CQDma_RID),
    .I_RUSER(CQDma_RUSER),
    .I_RRESP(CQDma_RRESP),
    .I_RLAST(CQDma_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(CQDma_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(CQDma_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(CQDma_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(CQDma_BRESP),
    .I_BID(CQDma_BID),
    .I_BUSER(CQDma_BUSER)
);

CuDmaController_CUDma_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CUDMA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CUDMA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CUDMA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CUDMA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CUDMA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CUDMA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CUDMA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CUDMA_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_CUDMA_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_CUDMA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CUDMA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CUDMA_CACHE_VALUE ))
CuDmaController_CUDma_m_axi_U(
    .AWVALID(m_axi_CUDma_AWVALID),
    .AWREADY(m_axi_CUDma_AWREADY),
    .AWADDR(m_axi_CUDma_AWADDR),
    .AWID(m_axi_CUDma_AWID),
    .AWLEN(m_axi_CUDma_AWLEN),
    .AWSIZE(m_axi_CUDma_AWSIZE),
    .AWBURST(m_axi_CUDma_AWBURST),
    .AWLOCK(m_axi_CUDma_AWLOCK),
    .AWCACHE(m_axi_CUDma_AWCACHE),
    .AWPROT(m_axi_CUDma_AWPROT),
    .AWQOS(m_axi_CUDma_AWQOS),
    .AWREGION(m_axi_CUDma_AWREGION),
    .AWUSER(m_axi_CUDma_AWUSER),
    .WVALID(m_axi_CUDma_WVALID),
    .WREADY(m_axi_CUDma_WREADY),
    .WDATA(m_axi_CUDma_WDATA),
    .WSTRB(m_axi_CUDma_WSTRB),
    .WLAST(m_axi_CUDma_WLAST),
    .WID(m_axi_CUDma_WID),
    .WUSER(m_axi_CUDma_WUSER),
    .ARVALID(m_axi_CUDma_ARVALID),
    .ARREADY(m_axi_CUDma_ARREADY),
    .ARADDR(m_axi_CUDma_ARADDR),
    .ARID(m_axi_CUDma_ARID),
    .ARLEN(m_axi_CUDma_ARLEN),
    .ARSIZE(m_axi_CUDma_ARSIZE),
    .ARBURST(m_axi_CUDma_ARBURST),
    .ARLOCK(m_axi_CUDma_ARLOCK),
    .ARCACHE(m_axi_CUDma_ARCACHE),
    .ARPROT(m_axi_CUDma_ARPROT),
    .ARQOS(m_axi_CUDma_ARQOS),
    .ARREGION(m_axi_CUDma_ARREGION),
    .ARUSER(m_axi_CUDma_ARUSER),
    .RVALID(m_axi_CUDma_RVALID),
    .RREADY(m_axi_CUDma_RREADY),
    .RDATA(m_axi_CUDma_RDATA),
    .RLAST(m_axi_CUDma_RLAST),
    .RID(m_axi_CUDma_RID),
    .RUSER(m_axi_CUDma_RUSER),
    .RRESP(m_axi_CUDma_RRESP),
    .BVALID(m_axi_CUDma_BVALID),
    .BREADY(m_axi_CUDma_BREADY),
    .BRESP(m_axi_CUDma_BRESP),
    .BID(m_axi_CUDma_BID),
    .BUSER(m_axi_CUDma_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(CUDma_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(CUDma_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(CUDma_RDATA),
    .I_RID(CUDma_RID),
    .I_RUSER(CUDma_RUSER),
    .I_RRESP(CUDma_RRESP),
    .I_RLAST(CUDma_RLAST),
    .I_AWVALID(CUDma_AWVALID),
    .I_AWREADY(CUDma_AWREADY),
    .I_AWADDR(CUDma_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(CUDma_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(CUDma_WVALID),
    .I_WREADY(CUDma_WREADY),
    .I_WDATA(CUDma_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(CUDma_BVALID),
    .I_BREADY(CUDma_BREADY),
    .I_BRESP(CUDma_BRESP),
    .I_BID(CUDma_BID),
    .I_BUSER(CUDma_BUSER)
);

CuDmaController_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
CuDmaController_mbkb_U1(
    .din0(cubitmask_3_1_fu_142),
    .din1(cubitmask_3_3_fu_146),
    .din2(cubitmask_3_4_fu_150),
    .din3(cubitmask_3_7_fu_154),
    .din4(tmp_18_fu_783_p5),
    .dout(tmp_18_fu_783_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state30)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state30);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CQDma_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_CQDma_ARREADY <= 1'b0;
        end else if ((((1'b1 == CQDma_ARREADY) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == CQDma_ARREADY) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == CQDma_ARREADY) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_CQDma_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CUDma_AWREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
            ap_reg_ioackin_CUDma_AWREADY <= 1'b0;
        end else if ((((1'b1 == CUDma_AWREADY) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == CUDma_AWREADY) & (1'b1 == ap_CS_fsm_state29)))) begin
            ap_reg_ioackin_CUDma_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CUDma_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_CUDma_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_32_reg_1151 == 1'd1)))) begin
            ap_reg_ioackin_CUDma_WREADY <= 1'b0;
        end else if ((((1'b1 == CUDma_WREADY) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == CUDma_WREADY) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_32_reg_1151 == 1'd1)))) begin
            ap_reg_ioackin_CUDma_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == CUDma_BVALID) & (bit_reg_994 == 1'd1)) & (1'b1 == ap_CS_fsm_state39))) begin
        SlotOffset_n_reg_288 <= SlotOffset_n_1_fu_913_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        SlotOffset_n_reg_288 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == CUDma_BVALID) & (bit_reg_994 == 1'd1)) & (1'b1 == ap_CS_fsm_state39))) begin
        i_reg_300 <= i_1_reg_989;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_300 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        idxloopcount_fu_158 <= idxloopcount_4_reg_1092;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idxloopcount_fu_158 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        j_reg_311 <= j_1_reg_1072;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_reg_311 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((idxbit_fu_803_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state22) & (tmp_17_fu_762_p2 == 1'd1))) begin
        k_reg_322 <= k_1_fu_767_p2;
    end else if ((~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd0))) begin
        k_reg_322 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_32_fu_884_p2 == 1'd1))) begin
        l_reg_333 <= l_1_fu_889_p2;
    end else if (((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        l_reg_333 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_32_reg_1151 == 1'd1))) begin
        CQDma_addr_2_read_reg_1160 <= CQDma_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CqBaseAddress_assign_fu_182 <= CqBaseAddress;
        CuBaseAddress_assign_fu_178 <= CuBaseAddress;
        CuDmaQueue_assign_fu_162 <= CuDmaQueue;
        CuOffset_assign_fu_170 <= CuOffset;
        NoOfSlots_assign_fu_174 <= NoOfSlots;
        SlotSize_assign_fu_166 <= SlotSize;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_409_p2 == 1'd1) & (bit_fu_435_p1 == 1'd1))) begin
        SlotBaseAddr_reg_998 <= SlotBaseAddr_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_32_reg_1151 <= tmp_32_reg_1151;
        tmp_32_reg_1151 <= tmp_32_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_409_p2 == 1'd1))) begin
        bit_reg_994 <= bit_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd1))) begin
        cubitmask_3_10_reg_1077 <= CQDma_RDATA;
        tmp_reg_1085 <= tmp_fu_556_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        cubitmask_3_1_fu_142 <= cubitmask_3_8_fu_727_p3;
        cubitmask_3_3_fu_146 <= cubitmask_3_6_fu_719_p3;
        cubitmask_3_4_fu_150 <= cubitmask_3_2_fu_704_p3;
        cubitmask_3_7_fu_154 <= cubitmask_3_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == CQDma_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
        header_reg_1011 <= CQDma_RDATA;
        noofcumasksread_tmp_reg_1021 <= {{CQDma_RDATA[11:10]}};
        payload_reg_1016 <= {{CQDma_RDATA[19:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_989 <= i_1_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd0))) begin
        idxloopcount_4_reg_1092 <= idxloopcount_4_fu_649_p3;
        tmp_20_cast_reg_1097[7 : 0] <= tmp_20_cast_fu_657_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20))) begin
        j_1_reg_1072 <= j_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        noofcumasksread_reg_1027 <= noofcumasksread_fu_487_p2;
        payload_1_reg_1036 <= payload_1_fu_511_p2;
        tmp_s_reg_1042 <= tmp_s_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_10_cast_reg_1064[7 : 0] <= tmp_10_cast_fu_538_p1[7 : 0];
        tmp_2_cast_reg_1058[2 : 0] <= tmp_2_cast_fu_535_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_16_reg_1102 <= tmp_16_fu_754_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_24_reg_1135 <= tmp_24_fu_858_p2;
        tmp_29_reg_1140 <= tmp_29_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ((tmp_17_fu_762_p2 == 1'd0) | (idxbit_fu_803_p1 == 1'd1)))) begin
        tmp_27_reg_1118 <= tmp_27_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        tmp_31_reg_1129[7 : 0] <= tmp_31_fu_831_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CQDma_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            CQDma_ARADDR = tmp_28_fu_821_p1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            CQDma_ARADDR = tmp_2_fu_521_p1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            CQDma_ARADDR = tmp_8_fu_445_p1;
        end else begin
            CQDma_ARADDR = 'bx;
        end
    end else begin
        CQDma_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CQDma_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            CQDma_ARLEN = tmp_31_fu_831_p1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            CQDma_ARLEN = tmp_7_fu_531_p1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            CQDma_ARLEN = 32'd1;
        end else begin
            CQDma_ARLEN = 'bx;
        end
    end else begin
        CQDma_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CQDma_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((ap_reg_ioackin_CQDma_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((ap_reg_ioackin_CQDma_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
        CQDma_ARVALID = 1'b1;
    end else begin
        CQDma_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_32_reg_1151 == 1'd1)) | (~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd1)) | ((1'b1 == CQDma_RVALID) & (1'b1 == ap_CS_fsm_state11)))) begin
        CQDma_RREADY = 1'b1;
    end else begin
        CQDma_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        CQDma_blk_n_AR = m_axi_CQDma_ARREADY;
    end else begin
        CQDma_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_32_reg_1151 == 1'd1)) | ((1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd1)))) begin
        CQDma_blk_n_R = m_axi_CQDma_RVALID;
    end else begin
        CQDma_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CUDma_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            CUDma_AWADDR = tmp_34_fu_895_p1;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            CUDma_AWADDR = tmp_30_fu_870_p1;
        end else begin
            CUDma_AWADDR = 'bx;
        end
    end else begin
        CUDma_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CUDma_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            CUDma_AWLEN = 32'd1;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            CUDma_AWLEN = tmp_31_reg_1129;
        end else begin
            CUDma_AWLEN = 'bx;
        end
    end else begin
        CUDma_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CUDma_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((ap_reg_ioackin_CUDma_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29)))) begin
        CUDma_AWVALID = 1'b1;
    end else begin
        CUDma_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == CUDma_BVALID) & (bit_reg_994 == 1'd1)) & (1'b1 == ap_CS_fsm_state39) & (bit_reg_994 == 1'd1)) | ((1'b1 == CUDma_BVALID) & (1'b1 == ap_CS_fsm_state38)))) begin
        CUDma_BREADY = 1'b1;
    end else begin
        CUDma_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CUDma_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            CUDma_WDATA = 32'd1;
        end else if ((1'b1 == ap_condition_633)) begin
            CUDma_WDATA = CQDma_addr_2_read_reg_1160;
        end else begin
            CUDma_WDATA = 'bx;
        end
    end else begin
        CUDma_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_CUDma_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_CUDma_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_32_reg_1151 == 1'd1)))) begin
        CUDma_WVALID = 1'b1;
    end else begin
        CUDma_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state29))) begin
        CUDma_blk_n_AW = m_axi_CUDma_AWREADY;
    end else begin
        CUDma_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((1'b1 == ap_CS_fsm_state39) & (bit_reg_994 == 1'd1)))) begin
        CUDma_blk_n_B = m_axi_CUDma_BVALID;
    end else begin
        CUDma_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_32_reg_1151 == 1'd1)))) begin
        CUDma_blk_n_W = m_axi_CUDma_WREADY;
    end else begin
        CUDma_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_32_fu_884_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CQDma_ARREADY == 1'b0)) begin
        ap_sig_ioackin_CQDma_ARREADY = CQDma_ARREADY;
    end else begin
        ap_sig_ioackin_CQDma_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CUDma_AWREADY == 1'b0)) begin
        ap_sig_ioackin_CUDma_AWREADY = CUDma_AWREADY;
    end else begin
        ap_sig_ioackin_CUDma_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CUDma_WREADY == 1'b0)) begin
        ap_sig_ioackin_CUDma_WREADY = CUDma_WREADY;
    end else begin
        ap_sig_ioackin_CUDma_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_3_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((bit_fu_435_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_409_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == CQDma_RVALID) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if ((~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if ((~((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state20) & (tmp_9_fu_545_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state22 : begin
            if (((idxbit_fu_803_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state22) & (tmp_17_fu_762_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_sig_ioackin_CQDma_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_32_fu_884_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_32_fu_884_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((ap_sig_ioackin_CUDma_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((ap_sig_ioackin_CUDma_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == CUDma_BVALID) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if ((~((1'b0 == CUDma_BVALID) & (bit_reg_994 == 1'd1)) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SlotBaseAddr_fu_439_p2 = (SlotOffset_n_reg_288 + CqBaseAddress_assign_fu_182);

assign SlotOffset_n_1_fu_913_p2 = ($signed(tmp_35_fu_909_p1) + $signed(SlotOffset_n_reg_288));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == CQDma_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_32_reg_1151 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == CQDma_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_32_reg_1151 == 1'd1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state32_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == CQDma_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_32_reg_1151 == 1'd1)));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == CQDma_RVALID) & (tmp_9_fu_545_p2 == 1'd1));
end

assign ap_block_state30_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp0_stage0_iter1 = ((1'b0 == CQDma_RVALID) & (tmp_32_reg_1151 == 1'd1));
end

always @ (*) begin
    ap_block_state32_io = ((ap_sig_ioackin_CUDma_WREADY == 1'b0) & (ap_reg_pp0_iter1_tmp_32_reg_1151 == 1'd1));
end

assign ap_block_state32_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39 = ((1'b0 == CUDma_BVALID) & (bit_reg_994 == 1'd1));
end

always @ (*) begin
    ap_condition_633 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_tmp_32_reg_1151 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bit_fu_435_p1 = tmp_6_fu_429_p2[0:0];

assign cubitmask_3_2_fu_704_p3 = ((or_cond_fu_676_p2[0:0] === 1'b1) ? cubitmask_3_4_fu_150 : newSel2_fu_697_p3);

assign cubitmask_3_5_fu_712_p3 = ((sel_tmp6_fu_666_p2[0:0] === 1'b1) ? cubitmask_3_10_reg_1077 : cubitmask_3_3_fu_146);

assign cubitmask_3_6_fu_719_p3 = ((sel_tmp8_fu_671_p2[0:0] === 1'b1) ? cubitmask_3_3_fu_146 : cubitmask_3_5_fu_712_p3);

assign cubitmask_3_8_fu_727_p3 = ((sel_tmp8_fu_671_p2[0:0] === 1'b1) ? cubitmask_3_10_reg_1077 : cubitmask_3_1_fu_142);

assign cubitmask_3_fu_689_p3 = ((or_cond_fu_676_p2[0:0] === 1'b1) ? cubitmask_3_7_fu_154 : newSel_fu_682_p3);

assign i_1_fu_415_p2 = (i_reg_300 + 8'd1);

assign idxbit_fu_803_p1 = tmp_19_fu_797_p2[0:0];

assign idxloopcount_4_fu_649_p3 = ((tmp_15_fu_643_p2[0:0] === 1'b1) ? sel_tmp9_cast_fu_635_p3 : sel_tmp2_fu_597_p3);

assign j_1_fu_550_p2 = (j_reg_311 + 3'd1);

assign k_1_fu_767_p2 = (k_reg_322 + 8'd1);

assign l_1_fu_889_p2 = (l_reg_333 + 8'd1);

assign newSel2_fu_697_p3 = ((sel_tmp_fu_661_p2[0:0] === 1'b1) ? cubitmask_3_10_reg_1077 : cubitmask_3_4_fu_150);

assign newSel_fu_682_p3 = ((sel_tmp_fu_661_p2[0:0] === 1'b1) ? cubitmask_3_7_fu_154 : cubitmask_3_10_reg_1077);

assign noofcumasksread_fu_487_p2 = (noofcumasksread_tmp_s_fu_484_p1 + 3'd1);

assign noofcumasksread_tmp_s_fu_484_p1 = noofcumasksread_tmp_reg_1021;

assign or_cond_fu_676_p2 = (sel_tmp8_fu_671_p2 | sel_tmp6_fu_666_p2);

assign p_idxloopcount_fu_583_p3 = ((tmp_10_fu_563_p2[0:0] === 1'b1) ? 8'd32 : 8'd128);

assign p_neg_fu_499_p2 = (p_not_fu_493_p2 ^ 8'd3);

assign p_not_fu_493_p2 = (tmp_1_fu_475_p4 | 8'd252);

assign payload_1_fu_511_p2 = (payload_reg_1016 + tmp1_fu_505_p2);

assign sel_tmp2_fu_597_p3 = ((tmp_14_fu_591_p2[0:0] === 1'b1) ? p_idxloopcount_fu_583_p3 : idxloopcount_fu_158);

assign sel_tmp35_demorgan_fu_617_p2 = (tmp_11_fu_568_p2 | tmp_10_fu_563_p2);

assign sel_tmp3_fu_605_p2 = (tmp_10_fu_563_p2 ^ 1'd1);

assign sel_tmp4_fu_611_p2 = (tmp_11_fu_568_p2 & sel_tmp3_fu_605_p2);

assign sel_tmp5_fu_623_p2 = (sel_tmp35_demorgan_fu_617_p2 ^ 1'd1);

assign sel_tmp6_fu_666_p2 = ((tmp_reg_1085 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_629_p2 = (tmp_12_fu_573_p2 & sel_tmp5_fu_623_p2);

assign sel_tmp8_fu_671_p2 = ((tmp_reg_1085 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp9_cast_fu_635_p3 = ((sel_tmp7_fu_629_p2[0:0] === 1'b1) ? 8'd96 : 8'd64);

assign sel_tmp_fu_661_p2 = ((tmp_reg_1085 == 2'd2) ? 1'b1 : 1'b0);

assign tmp1_fu_505_p2 = ($signed(p_neg_fu_499_p2) + $signed(8'd252));

assign tmp_10_cast_fu_538_p1 = payload_1_reg_1036;

assign tmp_10_fu_563_p2 = ((noofcumasksread_tmp_reg_1021 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_11_cast_fu_541_p1 = $signed(j_reg_311);

assign tmp_11_fu_568_p2 = ((noofcumasksread_reg_1027 == 3'd2) ? 1'b1 : 1'b0);

assign tmp_12_fu_573_p2 = ((noofcumasksread_reg_1027 == 3'd3) ? 1'b1 : 1'b0);

assign tmp_13_fu_578_p2 = ((noofcumasksread_reg_1027 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_14_fu_591_p2 = (tmp_13_fu_578_p2 | tmp_10_fu_563_p2);

assign tmp_15_fu_643_p2 = (sel_tmp7_fu_629_p2 | sel_tmp4_fu_611_p2);

assign tmp_16_fu_754_p1 = $signed(k_reg_322);

assign tmp_17_fu_762_p2 = (($signed(tmp_21_cast_fu_758_p1) < $signed(tmp_20_cast_reg_1097)) ? 1'b1 : 1'b0);

assign tmp_18_fu_783_p5 = {{k_reg_322[6:5]}};

assign tmp_19_fu_797_p2 = tmp_18_fu_783_p6 >> tmp_16_fu_754_p1;

assign tmp_1_fu_475_p4 = {{header_reg_1011[17:10]}};

assign tmp_20_cast_fu_657_p1 = idxloopcount_4_fu_649_p3;

assign tmp_20_fu_835_p1 = $signed(CuOffset_assign_fu_170);

assign tmp_21_cast_fu_758_p1 = $signed(k_reg_322);

assign tmp_21_fu_839_p2 = tmp_16_reg_1102 << tmp_20_fu_835_p1;

assign tmp_22_fu_844_p4 = {{tmp_21_fu_839_p2[31:2]}};

assign tmp_23_fu_854_p1 = $signed(tmp_22_fu_844_p4);

assign tmp_24_fu_858_p2 = ($signed(CuBaseAddress_assign_fu_178) + $signed(tmp_23_fu_854_p1));

assign tmp_25_fu_807_p2 = (tmp_2_cast_reg_1058 + 4'd5);

assign tmp_26_fu_812_p1 = tmp_25_fu_807_p2;

assign tmp_27_fu_816_p2 = (tmp_26_fu_812_p1 + SlotBaseAddr_reg_998);

assign tmp_28_fu_821_p1 = tmp_27_reg_1118;

assign tmp_29_fu_864_p2 = (tmp_24_fu_858_p2 + 32'd4);

assign tmp_2_cast_fu_535_p1 = noofcumasksread_reg_1027;

assign tmp_2_fu_521_p1 = tmp_s_reg_1042;

assign tmp_30_fu_870_p1 = tmp_29_reg_1140;

assign tmp_31_cast_fu_880_p1 = $signed(l_reg_333);

assign tmp_31_fu_831_p1 = payload_1_reg_1036;

assign tmp_32_fu_884_p2 = (($signed(tmp_31_cast_fu_880_p1) < $signed(tmp_10_cast_reg_1064)) ? 1'b1 : 1'b0);

assign tmp_34_fu_895_p1 = tmp_24_reg_1135;

assign tmp_35_fu_909_p1 = $signed(SlotSize_assign_fu_166);

assign tmp_3_fu_409_p2 = (($signed(i_reg_300) < $signed(NoOfSlots_assign_fu_174)) ? 1'b1 : 1'b0);

assign tmp_4_fu_421_p1 = $signed(i_reg_300);

assign tmp_5_fu_425_p1 = $unsigned(tmp_4_fu_421_p1);

assign tmp_6_fu_429_p2 = $signed(CuDmaQueue_assign_fu_162) >>> tmp_5_fu_425_p1;

assign tmp_7_fu_531_p1 = noofcumasksread_reg_1027;

assign tmp_8_fu_445_p1 = SlotBaseAddr_reg_998;

assign tmp_9_fu_545_p2 = (($signed(tmp_11_cast_fu_541_p1) < $signed(tmp_2_cast_reg_1058)) ? 1'b1 : 1'b0);

assign tmp_fu_556_p1 = j_reg_311[1:0];

assign tmp_s_fu_516_p2 = (SlotBaseAddr_reg_998 + 32'd1);

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_1058[3] <= 1'b0;
    tmp_10_cast_reg_1064[8] <= 1'b0;
    tmp_20_cast_reg_1097[8] <= 1'b0;
    tmp_31_reg_1129[31:8] <= 24'b000000000000000000000000;
end

endmodule //CuDmaController


