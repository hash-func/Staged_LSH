-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity table_serch_hid_cal is
port (
    ap_ready : OUT STD_LOGIC;
    flame96 : IN STD_LOGIC_VECTOR (95 downto 0);
    L : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of table_serch_hid_cal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal tmp_9_fu_150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_166_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_238_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_190_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_222_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_350_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln849_fu_518_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_714_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln65_5_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_248_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_360_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_4_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_454_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_538_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_2_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_634_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_724_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_1_fu_804_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln65_1_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_2_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_818_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln65_3_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_3_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_4_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    ap_ready <= ap_const_logic_1;
    ap_return <= 
        select_ln65_3_fu_832_p3 when (or_ln65_3_fu_840_p2(0) = '1') else 
        select_ln65_4_fu_846_p3;
    icmp_ln65_1_fu_760_p2 <= "1" when (L = ap_const_lv3_4) else "0";
    icmp_ln65_2_fu_766_p2 <= "1" when (L = ap_const_lv3_3) else "0";
    icmp_ln65_3_fu_772_p2 <= "1" when (L = ap_const_lv3_2) else "0";
    icmp_ln65_4_fu_778_p2 <= "1" when (L = ap_const_lv3_1) else "0";
    icmp_ln65_5_fu_784_p2 <= "1" when (L = ap_const_lv3_0) else "0";
    icmp_ln65_fu_754_p2 <= "1" when (L = ap_const_lv3_5) else "0";
    or_ln65_1_fu_812_p2 <= (icmp_ln65_3_fu_772_p2 or icmp_ln65_2_fu_766_p2);
    or_ln65_2_fu_826_p2 <= (icmp_ln65_fu_754_p2 or icmp_ln65_1_fu_760_p2);
    or_ln65_3_fu_840_p2 <= (or_ln65_fu_798_p2 or or_ln65_1_fu_812_p2);
    or_ln65_fu_798_p2 <= (icmp_ln65_5_fu_784_p2 or icmp_ln65_4_fu_778_p2);
    p_Result_1_fu_360_p14 <= ((((((((((((ap_const_lv19_0 & tmp_20_fu_278_p3) & tmp_21_fu_286_p3) & tmp_22_fu_294_p3) & tmp_13_fu_182_p3) & tmp_7_fu_350_p4) & tmp_23_fu_302_p3) & tmp_24_fu_310_p3) & tmp_25_fu_318_p3) & tmp_26_fu_326_p3) & tmp_19_fu_230_p3) & tmp_27_fu_334_p3) & tmp_28_fu_342_p3);
    p_Result_2_fu_454_p15 <= (((((((((((((ap_const_lv19_0 & tmp_29_fu_390_p3) & tmp_30_fu_398_p3) & tmp_31_fu_406_p3) & tmp_32_fu_414_p3) & tmp_13_fu_182_p3) & tmp_32_fu_414_p3) & tmp_33_fu_422_p3) & tmp_12_fu_174_p3) & tmp_34_fu_430_p3) & tmp_35_fu_438_p3) & tmp_24_fu_310_p3) & tmp_29_fu_390_p3) & tmp_36_fu_446_p3);
    p_Result_3_fu_538_p15 <= (((((((((((((ap_const_lv19_0 & tmp_37_fu_486_p3) & tmp_38_fu_494_p3) & tmp_33_fu_422_p3) & tmp_39_fu_502_p3) & tmp_22_fu_294_p3) & tmp_40_fu_510_p3) & tmp_10_fu_158_p3) & tmp_20_fu_278_p3) & trunc_ln849_fu_518_p1) & tmp_16_fu_206_p3) & tmp_41_fu_522_p3) & tmp_41_fu_522_p3) & tmp_42_fu_530_p3);
    p_Result_4_fu_634_p15 <= (((((((((((((ap_const_lv19_0 & tmp_43_fu_570_p3) & tmp_44_fu_578_p3) & tmp_45_fu_586_p3) & tmp_46_fu_594_p3) & tmp_47_fu_602_p3) & tmp_48_fu_610_p3) & tmp_19_fu_230_p3) & tmp_13_fu_182_p3) & tmp_49_fu_618_p3) & tmp_50_fu_626_p3) & tmp_31_fu_406_p3) & tmp_37_fu_486_p3) & tmp_46_fu_594_p3);
    p_Result_5_fu_724_p14 <= ((((((((((((ap_const_lv19_0 & tmp_51_fu_666_p3) & tmp_29_fu_390_p3) & tmp_52_fu_674_p3) & tmp_26_fu_326_p3) & tmp_53_fu_682_p3) & tmp_16_fu_206_p3) & tmp_54_fu_690_p3) & tmp_11_fu_166_p3) & tmp_55_fu_698_p3) & tmp_43_fu_570_p3) & tmp_56_fu_706_p3) & tmp_8_fu_714_p4);
    p_Result_s_fu_248_p14 <= ((((((((((((ap_const_lv19_0 & tmp_9_fu_150_p3) & tmp_10_fu_158_p3) & tmp_11_fu_166_p3) & tmp_12_fu_174_p3) & tmp_fu_238_p4) & tmp_14_fu_190_p3) & tmp_15_fu_198_p3) & tmp_16_fu_206_p3) & tmp_17_fu_214_p3) & tmp_18_fu_222_p3) & tmp_19_fu_230_p3) & tmp_18_fu_222_p3);
    select_ln65_1_fu_804_p3 <= 
        p_Result_2_fu_454_p15 when (icmp_ln65_3_fu_772_p2(0) = '1') else 
        p_Result_3_fu_538_p15;
    select_ln65_2_fu_818_p3 <= 
        p_Result_4_fu_634_p15 when (icmp_ln65_1_fu_760_p2(0) = '1') else 
        p_Result_5_fu_724_p14;
    select_ln65_3_fu_832_p3 <= 
        select_ln65_fu_790_p3 when (or_ln65_fu_798_p2(0) = '1') else 
        select_ln65_1_fu_804_p3;
    select_ln65_4_fu_846_p3 <= 
        select_ln65_2_fu_818_p3 when (or_ln65_2_fu_826_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln65_fu_790_p3 <= 
        p_Result_s_fu_248_p14 when (icmp_ln65_5_fu_784_p2(0) = '1') else 
        p_Result_1_fu_360_p14;
    tmp_10_fu_158_p3 <= flame96(11 downto 11);
    tmp_11_fu_166_p3 <= flame96(55 downto 55);
    tmp_12_fu_174_p3 <= flame96(39 downto 39);
    tmp_13_fu_182_p3 <= flame96(81 downto 81);
    tmp_14_fu_190_p3 <= flame96(42 downto 42);
    tmp_15_fu_198_p3 <= flame96(27 downto 27);
    tmp_16_fu_206_p3 <= flame96(38 downto 38);
    tmp_17_fu_214_p3 <= flame96(72 downto 72);
    tmp_18_fu_222_p3 <= flame96(20 downto 20);
    tmp_19_fu_230_p3 <= flame96(47 downto 47);
    tmp_20_fu_278_p3 <= flame96(66 downto 66);
    tmp_21_fu_286_p3 <= flame96(28 downto 28);
    tmp_22_fu_294_p3 <= flame96(40 downto 40);
    tmp_23_fu_302_p3 <= flame96(70 downto 70);
    tmp_24_fu_310_p3 <= flame96(26 downto 26);
    tmp_25_fu_318_p3 <= flame96(71 downto 71);
    tmp_26_fu_326_p3 <= flame96(14 downto 14);
    tmp_27_fu_334_p3 <= flame96(25 downto 25);
    tmp_28_fu_342_p3 <= flame96(46 downto 46);
    tmp_29_fu_390_p3 <= flame96(84 downto 84);
    tmp_30_fu_398_p3 <= flame96(24 downto 24);
    tmp_31_fu_406_p3 <= flame96(53 downto 53);
    tmp_32_fu_414_p3 <= flame96(10 downto 10);
    tmp_33_fu_422_p3 <= flame96(43 downto 43);
    tmp_34_fu_430_p3 <= flame96(34 downto 34);
    tmp_35_fu_438_p3 <= flame96(89 downto 89);
    tmp_36_fu_446_p3 <= flame96(95 downto 95);
    tmp_37_fu_486_p3 <= flame96(69 downto 69);
    tmp_38_fu_494_p3 <= flame96(60 downto 60);
    tmp_39_fu_502_p3 <= flame96(32 downto 32);
    tmp_40_fu_510_p3 <= flame96(16 downto 16);
    tmp_41_fu_522_p3 <= flame96(74 downto 74);
    tmp_42_fu_530_p3 <= flame96(22 downto 22);
    tmp_43_fu_570_p3 <= flame96(77 downto 77);
    tmp_44_fu_578_p3 <= flame96(8 downto 8);
    tmp_45_fu_586_p3 <= flame96(63 downto 63);
    tmp_46_fu_594_p3 <= flame96(75 downto 75);
    tmp_47_fu_602_p3 <= flame96(2 downto 2);
    tmp_48_fu_610_p3 <= flame96(21 downto 21);
    tmp_49_fu_618_p3 <= flame96(54 downto 54);
    tmp_50_fu_626_p3 <= flame96(9 downto 9);
    tmp_51_fu_666_p3 <= flame96(57 downto 57);
    tmp_52_fu_674_p3 <= flame96(48 downto 48);
    tmp_53_fu_682_p3 <= flame96(6 downto 6);
    tmp_54_fu_690_p3 <= flame96(23 downto 23);
    tmp_55_fu_698_p3 <= flame96(5 downto 5);
    tmp_56_fu_706_p3 <= flame96(86 downto 86);
    
    tmp_7_fu_350_p4_proc : process(flame96)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_7_fu_350_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5D(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_5C(7 - 1 downto 0);
        v0_cpy := flame96;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5C(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5D(7-1 downto 0)));
            for tmp_7_fu_350_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_7_fu_350_p4_i) := flame96(96-1-tmp_7_fu_350_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_350_p4 <= resvalue(2-1 downto 0);
    end process;

    
    tmp_8_fu_714_p4_proc : process(flame96)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_8_fu_714_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_42(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_41(7 - 1 downto 0);
        v0_cpy := flame96;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_41(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_42(7-1 downto 0)));
            for tmp_8_fu_714_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_8_fu_714_p4_i) := flame96(96-1-tmp_8_fu_714_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_714_p4 <= resvalue(2-1 downto 0);
    end process;

    tmp_9_fu_150_p3 <= flame96(73 downto 73);
    
    tmp_fu_238_p4_proc : process(flame96)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_fu_238_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_51(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_50(7 - 1 downto 0);
        v0_cpy := flame96;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_50(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_51(7-1 downto 0)));
            for tmp_fu_238_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_fu_238_p4_i) := flame96(96-1-tmp_fu_238_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_238_p4 <= resvalue(2-1 downto 0);
    end process;

    trunc_ln849_fu_518_p1 <= flame96(1 - 1 downto 0);
end behav;
