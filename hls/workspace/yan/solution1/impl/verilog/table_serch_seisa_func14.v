// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module table_serch_seisa_func14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_table_aximm1_0_AWVALID,
        m_axi_table_aximm1_0_AWREADY,
        m_axi_table_aximm1_0_AWADDR,
        m_axi_table_aximm1_0_AWID,
        m_axi_table_aximm1_0_AWLEN,
        m_axi_table_aximm1_0_AWSIZE,
        m_axi_table_aximm1_0_AWBURST,
        m_axi_table_aximm1_0_AWLOCK,
        m_axi_table_aximm1_0_AWCACHE,
        m_axi_table_aximm1_0_AWPROT,
        m_axi_table_aximm1_0_AWQOS,
        m_axi_table_aximm1_0_AWREGION,
        m_axi_table_aximm1_0_AWUSER,
        m_axi_table_aximm1_0_WVALID,
        m_axi_table_aximm1_0_WREADY,
        m_axi_table_aximm1_0_WDATA,
        m_axi_table_aximm1_0_WSTRB,
        m_axi_table_aximm1_0_WLAST,
        m_axi_table_aximm1_0_WID,
        m_axi_table_aximm1_0_WUSER,
        m_axi_table_aximm1_0_ARVALID,
        m_axi_table_aximm1_0_ARREADY,
        m_axi_table_aximm1_0_ARADDR,
        m_axi_table_aximm1_0_ARID,
        m_axi_table_aximm1_0_ARLEN,
        m_axi_table_aximm1_0_ARSIZE,
        m_axi_table_aximm1_0_ARBURST,
        m_axi_table_aximm1_0_ARLOCK,
        m_axi_table_aximm1_0_ARCACHE,
        m_axi_table_aximm1_0_ARPROT,
        m_axi_table_aximm1_0_ARQOS,
        m_axi_table_aximm1_0_ARREGION,
        m_axi_table_aximm1_0_ARUSER,
        m_axi_table_aximm1_0_RVALID,
        m_axi_table_aximm1_0_RREADY,
        m_axi_table_aximm1_0_RDATA,
        m_axi_table_aximm1_0_RLAST,
        m_axi_table_aximm1_0_RID,
        m_axi_table_aximm1_0_RUSER,
        m_axi_table_aximm1_0_RRESP,
        m_axi_table_aximm1_0_BVALID,
        m_axi_table_aximm1_0_BREADY,
        m_axi_table_aximm1_0_BRESP,
        m_axi_table_aximm1_0_BID,
        m_axi_table_aximm1_0_BUSER,
        m_axi_query_plram0_0_AWVALID,
        m_axi_query_plram0_0_AWREADY,
        m_axi_query_plram0_0_AWADDR,
        m_axi_query_plram0_0_AWID,
        m_axi_query_plram0_0_AWLEN,
        m_axi_query_plram0_0_AWSIZE,
        m_axi_query_plram0_0_AWBURST,
        m_axi_query_plram0_0_AWLOCK,
        m_axi_query_plram0_0_AWCACHE,
        m_axi_query_plram0_0_AWPROT,
        m_axi_query_plram0_0_AWQOS,
        m_axi_query_plram0_0_AWREGION,
        m_axi_query_plram0_0_AWUSER,
        m_axi_query_plram0_0_WVALID,
        m_axi_query_plram0_0_WREADY,
        m_axi_query_plram0_0_WDATA,
        m_axi_query_plram0_0_WSTRB,
        m_axi_query_plram0_0_WLAST,
        m_axi_query_plram0_0_WID,
        m_axi_query_plram0_0_WUSER,
        m_axi_query_plram0_0_ARVALID,
        m_axi_query_plram0_0_ARREADY,
        m_axi_query_plram0_0_ARADDR,
        m_axi_query_plram0_0_ARID,
        m_axi_query_plram0_0_ARLEN,
        m_axi_query_plram0_0_ARSIZE,
        m_axi_query_plram0_0_ARBURST,
        m_axi_query_plram0_0_ARLOCK,
        m_axi_query_plram0_0_ARCACHE,
        m_axi_query_plram0_0_ARPROT,
        m_axi_query_plram0_0_ARQOS,
        m_axi_query_plram0_0_ARREGION,
        m_axi_query_plram0_0_ARUSER,
        m_axi_query_plram0_0_RVALID,
        m_axi_query_plram0_0_RREADY,
        m_axi_query_plram0_0_RDATA,
        m_axi_query_plram0_0_RLAST,
        m_axi_query_plram0_0_RID,
        m_axi_query_plram0_0_RUSER,
        m_axi_query_plram0_0_RRESP,
        m_axi_query_plram0_0_BVALID,
        m_axi_query_plram0_0_BREADY,
        m_axi_query_plram0_0_BRESP,
        m_axi_query_plram0_0_BID,
        m_axi_query_plram0_0_BUSER,
        m_axi_DB_aximm0_0_AWVALID,
        m_axi_DB_aximm0_0_AWREADY,
        m_axi_DB_aximm0_0_AWADDR,
        m_axi_DB_aximm0_0_AWID,
        m_axi_DB_aximm0_0_AWLEN,
        m_axi_DB_aximm0_0_AWSIZE,
        m_axi_DB_aximm0_0_AWBURST,
        m_axi_DB_aximm0_0_AWLOCK,
        m_axi_DB_aximm0_0_AWCACHE,
        m_axi_DB_aximm0_0_AWPROT,
        m_axi_DB_aximm0_0_AWQOS,
        m_axi_DB_aximm0_0_AWREGION,
        m_axi_DB_aximm0_0_AWUSER,
        m_axi_DB_aximm0_0_WVALID,
        m_axi_DB_aximm0_0_WREADY,
        m_axi_DB_aximm0_0_WDATA,
        m_axi_DB_aximm0_0_WSTRB,
        m_axi_DB_aximm0_0_WLAST,
        m_axi_DB_aximm0_0_WID,
        m_axi_DB_aximm0_0_WUSER,
        m_axi_DB_aximm0_0_ARVALID,
        m_axi_DB_aximm0_0_ARREADY,
        m_axi_DB_aximm0_0_ARADDR,
        m_axi_DB_aximm0_0_ARID,
        m_axi_DB_aximm0_0_ARLEN,
        m_axi_DB_aximm0_0_ARSIZE,
        m_axi_DB_aximm0_0_ARBURST,
        m_axi_DB_aximm0_0_ARLOCK,
        m_axi_DB_aximm0_0_ARCACHE,
        m_axi_DB_aximm0_0_ARPROT,
        m_axi_DB_aximm0_0_ARQOS,
        m_axi_DB_aximm0_0_ARREGION,
        m_axi_DB_aximm0_0_ARUSER,
        m_axi_DB_aximm0_0_RVALID,
        m_axi_DB_aximm0_0_RREADY,
        m_axi_DB_aximm0_0_RDATA,
        m_axi_DB_aximm0_0_RLAST,
        m_axi_DB_aximm0_0_RID,
        m_axi_DB_aximm0_0_RUSER,
        m_axi_DB_aximm0_0_RRESP,
        m_axi_DB_aximm0_0_BVALID,
        m_axi_DB_aximm0_0_BREADY,
        m_axi_DB_aximm0_0_BRESP,
        m_axi_DB_aximm0_0_BID,
        m_axi_DB_aximm0_0_BUSER,
        p_read,
        hash_table_dout,
        hash_table_empty_n,
        hash_table_read,
        query_dout,
        query_empty_n,
        query_read,
        FP_DB_dout,
        FP_DB_empty_n,
        FP_DB_read,
        backet_location_dout,
        backet_location_empty_n,
        backet_location_read,
        music_index_temp,
        music_index_temp_ap_vld,
        min_haming_dis_i_i_constprop_i,
        min_haming_dis_i_i_constprop_o,
        min_haming_dis_i_i_constprop_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 145'd1;
parameter    ap_ST_fsm_state2 = 145'd2;
parameter    ap_ST_fsm_state3 = 145'd4;
parameter    ap_ST_fsm_state4 = 145'd8;
parameter    ap_ST_fsm_state5 = 145'd16;
parameter    ap_ST_fsm_state6 = 145'd32;
parameter    ap_ST_fsm_state7 = 145'd64;
parameter    ap_ST_fsm_state8 = 145'd128;
parameter    ap_ST_fsm_state9 = 145'd256;
parameter    ap_ST_fsm_state10 = 145'd512;
parameter    ap_ST_fsm_state11 = 145'd1024;
parameter    ap_ST_fsm_state12 = 145'd2048;
parameter    ap_ST_fsm_state13 = 145'd4096;
parameter    ap_ST_fsm_state14 = 145'd8192;
parameter    ap_ST_fsm_state15 = 145'd16384;
parameter    ap_ST_fsm_state16 = 145'd32768;
parameter    ap_ST_fsm_state17 = 145'd65536;
parameter    ap_ST_fsm_state18 = 145'd131072;
parameter    ap_ST_fsm_state19 = 145'd262144;
parameter    ap_ST_fsm_state20 = 145'd524288;
parameter    ap_ST_fsm_state21 = 145'd1048576;
parameter    ap_ST_fsm_state22 = 145'd2097152;
parameter    ap_ST_fsm_state23 = 145'd4194304;
parameter    ap_ST_fsm_state24 = 145'd8388608;
parameter    ap_ST_fsm_state25 = 145'd16777216;
parameter    ap_ST_fsm_state26 = 145'd33554432;
parameter    ap_ST_fsm_state27 = 145'd67108864;
parameter    ap_ST_fsm_state28 = 145'd134217728;
parameter    ap_ST_fsm_state29 = 145'd268435456;
parameter    ap_ST_fsm_state30 = 145'd536870912;
parameter    ap_ST_fsm_state31 = 145'd1073741824;
parameter    ap_ST_fsm_state32 = 145'd2147483648;
parameter    ap_ST_fsm_state33 = 145'd4294967296;
parameter    ap_ST_fsm_state34 = 145'd8589934592;
parameter    ap_ST_fsm_state35 = 145'd17179869184;
parameter    ap_ST_fsm_state36 = 145'd34359738368;
parameter    ap_ST_fsm_state37 = 145'd68719476736;
parameter    ap_ST_fsm_state38 = 145'd137438953472;
parameter    ap_ST_fsm_state39 = 145'd274877906944;
parameter    ap_ST_fsm_state40 = 145'd549755813888;
parameter    ap_ST_fsm_state41 = 145'd1099511627776;
parameter    ap_ST_fsm_state42 = 145'd2199023255552;
parameter    ap_ST_fsm_state43 = 145'd4398046511104;
parameter    ap_ST_fsm_state44 = 145'd8796093022208;
parameter    ap_ST_fsm_state45 = 145'd17592186044416;
parameter    ap_ST_fsm_state46 = 145'd35184372088832;
parameter    ap_ST_fsm_state47 = 145'd70368744177664;
parameter    ap_ST_fsm_state48 = 145'd140737488355328;
parameter    ap_ST_fsm_state49 = 145'd281474976710656;
parameter    ap_ST_fsm_state50 = 145'd562949953421312;
parameter    ap_ST_fsm_state51 = 145'd1125899906842624;
parameter    ap_ST_fsm_state52 = 145'd2251799813685248;
parameter    ap_ST_fsm_state53 = 145'd4503599627370496;
parameter    ap_ST_fsm_state54 = 145'd9007199254740992;
parameter    ap_ST_fsm_state55 = 145'd18014398509481984;
parameter    ap_ST_fsm_state56 = 145'd36028797018963968;
parameter    ap_ST_fsm_state57 = 145'd72057594037927936;
parameter    ap_ST_fsm_state58 = 145'd144115188075855872;
parameter    ap_ST_fsm_state59 = 145'd288230376151711744;
parameter    ap_ST_fsm_state60 = 145'd576460752303423488;
parameter    ap_ST_fsm_state61 = 145'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 145'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 145'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 145'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 145'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 145'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 145'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 145'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 145'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 145'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 145'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 145'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 145'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 145'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 145'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 145'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 145'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 145'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 145'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 145'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 145'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 145'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 145'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 145'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 145'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 145'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 145'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 145'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 145'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 145'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 145'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 145'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 145'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 145'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 145'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 145'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 145'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 145'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 145'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 145'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 145'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 145'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 145'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 145'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 145'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 145'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 145'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 145'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 145'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 145'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 145'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 145'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 145'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 145'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 145'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 145'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 145'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 145'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 145'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 145'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 145'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 145'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 145'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 145'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 145'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 145'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 145'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 145'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 145'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 145'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 145'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 145'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 145'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 145'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 145'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 145'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 145'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 145'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 145'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 145'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 145'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 145'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 145'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_pp0_stage0 = 145'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 145'd22300745198530623141535718272648361505980416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_table_aximm1_0_AWVALID;
input   m_axi_table_aximm1_0_AWREADY;
output  [63:0] m_axi_table_aximm1_0_AWADDR;
output  [0:0] m_axi_table_aximm1_0_AWID;
output  [31:0] m_axi_table_aximm1_0_AWLEN;
output  [2:0] m_axi_table_aximm1_0_AWSIZE;
output  [1:0] m_axi_table_aximm1_0_AWBURST;
output  [1:0] m_axi_table_aximm1_0_AWLOCK;
output  [3:0] m_axi_table_aximm1_0_AWCACHE;
output  [2:0] m_axi_table_aximm1_0_AWPROT;
output  [3:0] m_axi_table_aximm1_0_AWQOS;
output  [3:0] m_axi_table_aximm1_0_AWREGION;
output  [0:0] m_axi_table_aximm1_0_AWUSER;
output   m_axi_table_aximm1_0_WVALID;
input   m_axi_table_aximm1_0_WREADY;
output  [31:0] m_axi_table_aximm1_0_WDATA;
output  [3:0] m_axi_table_aximm1_0_WSTRB;
output   m_axi_table_aximm1_0_WLAST;
output  [0:0] m_axi_table_aximm1_0_WID;
output  [0:0] m_axi_table_aximm1_0_WUSER;
output   m_axi_table_aximm1_0_ARVALID;
input   m_axi_table_aximm1_0_ARREADY;
output  [63:0] m_axi_table_aximm1_0_ARADDR;
output  [0:0] m_axi_table_aximm1_0_ARID;
output  [31:0] m_axi_table_aximm1_0_ARLEN;
output  [2:0] m_axi_table_aximm1_0_ARSIZE;
output  [1:0] m_axi_table_aximm1_0_ARBURST;
output  [1:0] m_axi_table_aximm1_0_ARLOCK;
output  [3:0] m_axi_table_aximm1_0_ARCACHE;
output  [2:0] m_axi_table_aximm1_0_ARPROT;
output  [3:0] m_axi_table_aximm1_0_ARQOS;
output  [3:0] m_axi_table_aximm1_0_ARREGION;
output  [0:0] m_axi_table_aximm1_0_ARUSER;
input   m_axi_table_aximm1_0_RVALID;
output   m_axi_table_aximm1_0_RREADY;
input  [31:0] m_axi_table_aximm1_0_RDATA;
input   m_axi_table_aximm1_0_RLAST;
input  [0:0] m_axi_table_aximm1_0_RID;
input  [0:0] m_axi_table_aximm1_0_RUSER;
input  [1:0] m_axi_table_aximm1_0_RRESP;
input   m_axi_table_aximm1_0_BVALID;
output   m_axi_table_aximm1_0_BREADY;
input  [1:0] m_axi_table_aximm1_0_BRESP;
input  [0:0] m_axi_table_aximm1_0_BID;
input  [0:0] m_axi_table_aximm1_0_BUSER;
output   m_axi_query_plram0_0_AWVALID;
input   m_axi_query_plram0_0_AWREADY;
output  [63:0] m_axi_query_plram0_0_AWADDR;
output  [0:0] m_axi_query_plram0_0_AWID;
output  [31:0] m_axi_query_plram0_0_AWLEN;
output  [2:0] m_axi_query_plram0_0_AWSIZE;
output  [1:0] m_axi_query_plram0_0_AWBURST;
output  [1:0] m_axi_query_plram0_0_AWLOCK;
output  [3:0] m_axi_query_plram0_0_AWCACHE;
output  [2:0] m_axi_query_plram0_0_AWPROT;
output  [3:0] m_axi_query_plram0_0_AWQOS;
output  [3:0] m_axi_query_plram0_0_AWREGION;
output  [0:0] m_axi_query_plram0_0_AWUSER;
output   m_axi_query_plram0_0_WVALID;
input   m_axi_query_plram0_0_WREADY;
output  [511:0] m_axi_query_plram0_0_WDATA;
output  [63:0] m_axi_query_plram0_0_WSTRB;
output   m_axi_query_plram0_0_WLAST;
output  [0:0] m_axi_query_plram0_0_WID;
output  [0:0] m_axi_query_plram0_0_WUSER;
output   m_axi_query_plram0_0_ARVALID;
input   m_axi_query_plram0_0_ARREADY;
output  [63:0] m_axi_query_plram0_0_ARADDR;
output  [0:0] m_axi_query_plram0_0_ARID;
output  [31:0] m_axi_query_plram0_0_ARLEN;
output  [2:0] m_axi_query_plram0_0_ARSIZE;
output  [1:0] m_axi_query_plram0_0_ARBURST;
output  [1:0] m_axi_query_plram0_0_ARLOCK;
output  [3:0] m_axi_query_plram0_0_ARCACHE;
output  [2:0] m_axi_query_plram0_0_ARPROT;
output  [3:0] m_axi_query_plram0_0_ARQOS;
output  [3:0] m_axi_query_plram0_0_ARREGION;
output  [0:0] m_axi_query_plram0_0_ARUSER;
input   m_axi_query_plram0_0_RVALID;
output   m_axi_query_plram0_0_RREADY;
input  [511:0] m_axi_query_plram0_0_RDATA;
input   m_axi_query_plram0_0_RLAST;
input  [0:0] m_axi_query_plram0_0_RID;
input  [0:0] m_axi_query_plram0_0_RUSER;
input  [1:0] m_axi_query_plram0_0_RRESP;
input   m_axi_query_plram0_0_BVALID;
output   m_axi_query_plram0_0_BREADY;
input  [1:0] m_axi_query_plram0_0_BRESP;
input  [0:0] m_axi_query_plram0_0_BID;
input  [0:0] m_axi_query_plram0_0_BUSER;
output   m_axi_DB_aximm0_0_AWVALID;
input   m_axi_DB_aximm0_0_AWREADY;
output  [63:0] m_axi_DB_aximm0_0_AWADDR;
output  [0:0] m_axi_DB_aximm0_0_AWID;
output  [31:0] m_axi_DB_aximm0_0_AWLEN;
output  [2:0] m_axi_DB_aximm0_0_AWSIZE;
output  [1:0] m_axi_DB_aximm0_0_AWBURST;
output  [1:0] m_axi_DB_aximm0_0_AWLOCK;
output  [3:0] m_axi_DB_aximm0_0_AWCACHE;
output  [2:0] m_axi_DB_aximm0_0_AWPROT;
output  [3:0] m_axi_DB_aximm0_0_AWQOS;
output  [3:0] m_axi_DB_aximm0_0_AWREGION;
output  [0:0] m_axi_DB_aximm0_0_AWUSER;
output   m_axi_DB_aximm0_0_WVALID;
input   m_axi_DB_aximm0_0_WREADY;
output  [511:0] m_axi_DB_aximm0_0_WDATA;
output  [63:0] m_axi_DB_aximm0_0_WSTRB;
output   m_axi_DB_aximm0_0_WLAST;
output  [0:0] m_axi_DB_aximm0_0_WID;
output  [0:0] m_axi_DB_aximm0_0_WUSER;
output   m_axi_DB_aximm0_0_ARVALID;
input   m_axi_DB_aximm0_0_ARREADY;
output  [63:0] m_axi_DB_aximm0_0_ARADDR;
output  [0:0] m_axi_DB_aximm0_0_ARID;
output  [31:0] m_axi_DB_aximm0_0_ARLEN;
output  [2:0] m_axi_DB_aximm0_0_ARSIZE;
output  [1:0] m_axi_DB_aximm0_0_ARBURST;
output  [1:0] m_axi_DB_aximm0_0_ARLOCK;
output  [3:0] m_axi_DB_aximm0_0_ARCACHE;
output  [2:0] m_axi_DB_aximm0_0_ARPROT;
output  [3:0] m_axi_DB_aximm0_0_ARQOS;
output  [3:0] m_axi_DB_aximm0_0_ARREGION;
output  [0:0] m_axi_DB_aximm0_0_ARUSER;
input   m_axi_DB_aximm0_0_RVALID;
output   m_axi_DB_aximm0_0_RREADY;
input  [511:0] m_axi_DB_aximm0_0_RDATA;
input   m_axi_DB_aximm0_0_RLAST;
input  [0:0] m_axi_DB_aximm0_0_RID;
input  [0:0] m_axi_DB_aximm0_0_RUSER;
input  [1:0] m_axi_DB_aximm0_0_RRESP;
input   m_axi_DB_aximm0_0_BVALID;
output   m_axi_DB_aximm0_0_BREADY;
input  [1:0] m_axi_DB_aximm0_0_BRESP;
input  [0:0] m_axi_DB_aximm0_0_BID;
input  [0:0] m_axi_DB_aximm0_0_BUSER;
input  [6:0] p_read;
input  [63:0] hash_table_dout;
input   hash_table_empty_n;
output   hash_table_read;
input  [63:0] query_dout;
input   query_empty_n;
output   query_read;
input  [63:0] FP_DB_dout;
input   FP_DB_empty_n;
output   FP_DB_read;
input  [31:0] backet_location_dout;
input   backet_location_empty_n;
output   backet_location_read;
output  [25:0] music_index_temp;
output   music_index_temp_ap_vld;
input  [12:0] min_haming_dis_i_i_constprop_i;
output  [12:0] min_haming_dis_i_i_constprop_o;
output   min_haming_dis_i_i_constprop_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_table_aximm1_0_ARVALID;
reg m_axi_table_aximm1_0_RREADY;
reg m_axi_query_plram0_0_ARVALID;
reg m_axi_query_plram0_0_RREADY;
reg m_axi_DB_aximm0_0_ARVALID;
reg m_axi_DB_aximm0_0_RREADY;
reg hash_table_read;
reg query_read;
reg FP_DB_read;
reg backet_location_read;
reg[25:0] music_index_temp;
reg music_index_temp_ap_vld;
reg[12:0] min_haming_dis_i_i_constprop_o;
reg min_haming_dis_i_i_constprop_o_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [144:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    table_aximm1_0_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    table_aximm1_0_blk_n_R;
wire    ap_CS_fsm_state72;
reg    query_plram0_0_blk_n_AR;
reg    query_plram0_0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1201_reg_666;
reg   [0:0] icmp_ln1206_reg_670;
reg    DB_aximm0_0_blk_n_AR;
wire    ap_CS_fsm_state74;
reg    DB_aximm0_0_blk_n_R;
reg    hash_table_blk_n;
reg    query_blk_n;
reg    FP_DB_blk_n;
reg    backet_location_blk_n;
reg   [5:0] indvar_i_i_reg_215;
reg   [12:0] haming_dis_reg_226;
reg   [383:0] shiftreg_i_i_reg_238;
reg   [383:0] shiftreg3_i_i_reg_250;
reg   [63:0] FP_DB_5_reg_613;
wire   [0:0] icmp_ln1230_fu_304_p2;
reg   [0:0] icmp_ln1230_reg_618;
reg   [63:0] table_aximm1_0_addr_reg_622;
reg   [57:0] trunc_ln20_reg_628;
reg   [24:0] trunc_ln19_reg_639;
reg   [57:0] trunc_ln1201_9_reg_645;
wire    ap_CS_fsm_state73;
wire   [25:0] zext_ln1226_fu_414_p1;
reg   [25:0] zext_ln1226_reg_656;
wire    ap_CS_fsm_state143;
wire   [5:0] add_ln1201_5_fu_417_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state144_pp0_stage0_iter0;
reg    ap_predicate_op407_read_state145;
reg    ap_predicate_op408_read_state145;
reg    ap_block_state145_pp0_stage0_iter1;
wire    ap_block_state146_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1201_fu_423_p2;
reg   [0:0] icmp_ln1201_reg_666_pp0_iter1_reg;
wire   [0:0] icmp_ln1206_fu_433_p2;
reg   [0:0] icmp_ln1206_reg_670_pp0_iter1_reg;
reg   [511:0] query_plram0_0_addr_read_reg_674;
reg   [511:0] DB_aximm0_0_addr_read_reg_679;
reg    ap_enable_reg_pp0_iter2;
wire   [12:0] haming_dis_5_fu_591_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state145;
wire    reg_hd_cal32_fu_280_ap_ready;
wire   [31:0] reg_hd_cal32_fu_280_subfp1;
wire   [31:0] reg_hd_cal32_fu_280_subfp2;
wire   [5:0] reg_hd_cal32_fu_280_ap_return;
wire    reg_13_hd_cal32_fu_286_ap_ready;
wire   [31:0] reg_13_hd_cal32_fu_286_subfp1;
wire   [31:0] reg_13_hd_cal32_fu_286_subfp2;
wire   [5:0] reg_13_hd_cal32_fu_286_ap_return;
wire    reg_14_hd_cal32_fu_292_ap_ready;
wire   [31:0] reg_14_hd_cal32_fu_292_subfp1;
wire   [31:0] reg_14_hd_cal32_fu_292_subfp2;
wire   [5:0] reg_14_hd_cal32_fu_292_ap_return;
wire    reg_15_hd_cal32_fu_298_ap_ready;
wire   [31:0] reg_15_hd_cal32_fu_298_subfp1;
wire   [31:0] reg_15_hd_cal32_fu_298_subfp2;
wire   [5:0] reg_15_hd_cal32_fu_298_ap_return;
reg   [511:0] ap_phi_mux_empty_114_phi_fu_265_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_114_reg_262;
wire   [511:0] zext_ln1201_10_fu_444_p1;
reg   [511:0] ap_phi_mux_empty_115_phi_fu_274_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_115_reg_271;
wire   [511:0] zext_ln1201_9_fu_439_p1;
wire  signed [63:0] sext_ln1233_5_fu_338_p1;
wire  signed [63:0] sext_ln1201_fu_358_p1;
wire  signed [63:0] sext_ln1201_5_fu_404_p1;
reg    ap_block_state2_io;
wire    ap_CS_fsm_state147;
wire   [0:0] icmp_ln1246_fu_601_p2;
reg    ap_block_state1;
reg   [25:0] music_index_temp_preg;
wire   [33:0] shl_ln_fu_310_p3;
wire  signed [63:0] sext_ln1233_fu_318_p1;
wire   [63:0] add_ln1233_fu_322_p2;
wire   [61:0] trunc_ln_fu_328_p4;
wire   [33:0] shl_ln4_fu_378_p3;
wire   [63:0] zext_ln1201_fu_385_p1;
wire   [63:0] add_ln1201_fu_389_p2;
wire   [1:0] trunc_ln1201_fu_429_p1;
wire   [6:0] zext_ln1199_fu_545_p1;
wire   [6:0] zext_ln1199_13_fu_549_p1;
wire   [6:0] add_ln1207_fu_561_p2;
wire   [6:0] zext_ln1199_14_fu_553_p1;
wire   [6:0] zext_ln1199_15_fu_557_p1;
wire   [6:0] add_ln1207_13_fu_571_p2;
wire   [7:0] zext_ln1207_9_fu_577_p1;
wire   [7:0] zext_ln1207_fu_567_p1;
wire   [7:0] add_ln1207_14_fu_581_p2;
wire   [12:0] zext_ln1207_10_fu_587_p1;
reg   [144:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 145'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 music_index_temp_preg = 26'd0;
end

table_serch_hd_cal32 reg_hd_cal32_fu_280(
    .ap_ready(reg_hd_cal32_fu_280_ap_ready),
    .subfp1(reg_hd_cal32_fu_280_subfp1),
    .subfp2(reg_hd_cal32_fu_280_subfp2),
    .ap_return(reg_hd_cal32_fu_280_ap_return)
);

table_serch_hd_cal32 reg_13_hd_cal32_fu_286(
    .ap_ready(reg_13_hd_cal32_fu_286_ap_ready),
    .subfp1(reg_13_hd_cal32_fu_286_subfp1),
    .subfp2(reg_13_hd_cal32_fu_286_subfp2),
    .ap_return(reg_13_hd_cal32_fu_286_ap_return)
);

table_serch_hd_cal32 reg_14_hd_cal32_fu_292(
    .ap_ready(reg_14_hd_cal32_fu_292_ap_ready),
    .subfp1(reg_14_hd_cal32_fu_292_subfp1),
    .subfp2(reg_14_hd_cal32_fu_292_subfp2),
    .ap_return(reg_14_hd_cal32_fu_292_ap_return)
);

table_serch_hd_cal32 reg_15_hd_cal32_fu_298(
    .ap_ready(reg_15_hd_cal32_fu_298_ap_ready),
    .subfp1(reg_15_hd_cal32_fu_298_subfp1),
    .subfp2(reg_15_hd_cal32_fu_298_subfp2),
    .ap_return(reg_15_hd_cal32_fu_298_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state147)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state143)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state143) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state145)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state145))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state143)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                music_index_temp_preg[0] <= 1'b0;
        music_index_temp_preg[1] <= 1'b0;
        music_index_temp_preg[2] <= 1'b0;
        music_index_temp_preg[3] <= 1'b0;
        music_index_temp_preg[4] <= 1'b0;
        music_index_temp_preg[5] <= 1'b0;
        music_index_temp_preg[6] <= 1'b0;
        music_index_temp_preg[7] <= 1'b0;
        music_index_temp_preg[8] <= 1'b0;
        music_index_temp_preg[9] <= 1'b0;
        music_index_temp_preg[10] <= 1'b0;
        music_index_temp_preg[11] <= 1'b0;
        music_index_temp_preg[12] <= 1'b0;
        music_index_temp_preg[13] <= 1'b0;
        music_index_temp_preg[14] <= 1'b0;
        music_index_temp_preg[15] <= 1'b0;
        music_index_temp_preg[16] <= 1'b0;
        music_index_temp_preg[17] <= 1'b0;
        music_index_temp_preg[18] <= 1'b0;
        music_index_temp_preg[19] <= 1'b0;
        music_index_temp_preg[20] <= 1'b0;
        music_index_temp_preg[21] <= 1'b0;
        music_index_temp_preg[22] <= 1'b0;
        music_index_temp_preg[23] <= 1'b0;
        music_index_temp_preg[24] <= 1'b0;
    end else begin
        if (((icmp_ln1246_fu_601_p2 == 1'd0) & (icmp_ln1230_reg_618 == 1'd1) & (1'b1 == ap_CS_fsm_state147))) begin
                        music_index_temp_preg[24 : 0] <= zext_ln1226_reg_656[24 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        haming_dis_reg_226 <= 13'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1201_reg_666_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        haming_dis_reg_226 <= haming_dis_5_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        indvar_i_i_reg_215 <= 6'd0;
    end else if (((icmp_ln1201_fu_423_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_i_i_reg_215 <= add_ln1201_5_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        shiftreg3_i_i_reg_250 <= 384'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1201_reg_666_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg3_i_i_reg_250 <= {{ap_phi_mux_empty_115_phi_fu_274_p4[511:128]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        shiftreg_i_i_reg_238 <= 384'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1201_reg_666_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_i_i_reg_238 <= {{ap_phi_mux_empty_114_phi_fu_265_p4[511:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op408_read_state145 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DB_aximm0_0_addr_read_reg_679 <= m_axi_DB_aximm0_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        FP_DB_5_reg_613 <= FP_DB_dout;
        icmp_ln1230_reg_618 <= icmp_ln1230_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1201_reg_666 <= icmp_ln1201_fu_423_p2;
        icmp_ln1201_reg_666_pp0_iter1_reg <= icmp_ln1201_reg_666;
        icmp_ln1206_reg_670_pp0_iter1_reg <= icmp_ln1206_reg_670;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1201_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1206_reg_670 <= icmp_ln1206_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op407_read_state145 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_plram0_0_addr_read_reg_674 <= m_axi_query_plram0_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1230_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        table_aximm1_0_addr_reg_622 <= sext_ln1233_5_fu_338_p1;
        trunc_ln20_reg_628 <= {{query_dout[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        trunc_ln1201_9_reg_645 <= {{add_ln1201_fu_389_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        trunc_ln19_reg_639 <= {{m_axi_table_aximm1_0_RDATA[31:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        zext_ln1226_reg_656[24 : 0] <= zext_ln1226_fu_414_p1[24 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        DB_aximm0_0_blk_n_AR = m_axi_DB_aximm0_0_ARREADY;
    end else begin
        DB_aximm0_0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1206_reg_670 == 1'd1) & (icmp_ln1201_reg_666 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DB_aximm0_0_blk_n_R = m_axi_DB_aximm0_0_RVALID;
    end else begin
        DB_aximm0_0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        FP_DB_blk_n = FP_DB_empty_n;
    end else begin
        FP_DB_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        FP_DB_read = 1'b1;
    end else begin
        FP_DB_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state145 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state145 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1201_fu_423_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1201_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln1206_reg_670_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_114_phi_fu_265_p4 = zext_ln1201_10_fu_444_p1;
        end else if ((icmp_ln1206_reg_670_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_114_phi_fu_265_p4 = query_plram0_0_addr_read_reg_674;
        end else begin
            ap_phi_mux_empty_114_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_empty_114_reg_262;
        end
    end else begin
        ap_phi_mux_empty_114_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_empty_114_reg_262;
    end
end

always @ (*) begin
    if ((icmp_ln1201_reg_666_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln1206_reg_670_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_115_phi_fu_274_p4 = zext_ln1201_9_fu_439_p1;
        end else if ((icmp_ln1206_reg_670_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_115_phi_fu_274_p4 = DB_aximm0_0_addr_read_reg_679;
        end else begin
            ap_phi_mux_empty_115_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_115_reg_271;
        end
    end else begin
        ap_phi_mux_empty_115_phi_fu_274_p4 = ap_phi_reg_pp0_iter2_empty_115_reg_271;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        backet_location_blk_n = backet_location_empty_n;
    end else begin
        backet_location_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        backet_location_read = 1'b1;
    end else begin
        backet_location_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hash_table_blk_n = hash_table_empty_n;
    end else begin
        hash_table_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hash_table_read = 1'b1;
    end else begin
        hash_table_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_DB_aximm0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
        m_axi_DB_aximm0_0_ARVALID = 1'b1;
    end else begin
        m_axi_DB_aximm0_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op408_read_state145 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_DB_aximm0_0_RREADY = 1'b1;
    end else begin
        m_axi_DB_aximm0_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_query_plram0_0_ARVALID = 1'b1;
    end else begin
        m_axi_query_plram0_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op407_read_state145 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_query_plram0_0_RREADY = 1'b1;
    end else begin
        m_axi_query_plram0_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_table_aximm1_0_ARVALID = 1'b1;
    end else begin
        m_axi_table_aximm1_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_table_aximm1_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        m_axi_table_aximm1_0_RREADY = 1'b1;
    end else begin
        m_axi_table_aximm1_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1246_fu_601_p2 == 1'd0) & (icmp_ln1230_reg_618 == 1'd1) & (1'b1 == ap_CS_fsm_state147))) begin
        min_haming_dis_i_i_constprop_o = haming_dis_reg_226;
    end else begin
        min_haming_dis_i_i_constprop_o = min_haming_dis_i_i_constprop_i;
    end
end

always @ (*) begin
    if (((icmp_ln1246_fu_601_p2 == 1'd0) & (icmp_ln1230_reg_618 == 1'd1) & (1'b1 == ap_CS_fsm_state147))) begin
        min_haming_dis_i_i_constprop_o_ap_vld = 1'b1;
    end else begin
        min_haming_dis_i_i_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1246_fu_601_p2 == 1'd0) & (icmp_ln1230_reg_618 == 1'd1) & (1'b1 == ap_CS_fsm_state147))) begin
        music_index_temp = zext_ln1226_reg_656;
    end else begin
        music_index_temp = music_index_temp_preg;
    end
end

always @ (*) begin
    if (((icmp_ln1246_fu_601_p2 == 1'd0) & (icmp_ln1230_reg_618 == 1'd1) & (1'b1 == ap_CS_fsm_state147))) begin
        music_index_temp_ap_vld = 1'b1;
    end else begin
        music_index_temp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        query_blk_n = query_empty_n;
    end else begin
        query_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        query_plram0_0_blk_n_AR = m_axi_query_plram0_0_ARREADY;
    end else begin
        query_plram0_0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1206_reg_670 == 1'd1) & (icmp_ln1201_reg_666 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_plram0_0_blk_n_R = m_axi_query_plram0_0_RVALID;
    end else begin
        query_plram0_0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        query_read = 1'b1;
    end else begin
        query_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        table_aximm1_0_blk_n_AR = m_axi_table_aximm1_0_ARREADY;
    end else begin
        table_aximm1_0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        table_aximm1_0_blk_n_R = m_axi_table_aximm1_0_RVALID;
    end else begin
        table_aximm1_0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln1230_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else if ((~((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln1230_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((m_axi_table_aximm1_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((m_axi_DB_aximm0_0_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1201_5_fu_417_p2 = (indvar_i_i_reg_215 + 6'd1);

assign add_ln1201_fu_389_p2 = (FP_DB_5_reg_613 + zext_ln1201_fu_385_p1);

assign add_ln1207_13_fu_571_p2 = (zext_ln1199_14_fu_553_p1 + zext_ln1199_15_fu_557_p1);

assign add_ln1207_14_fu_581_p2 = (zext_ln1207_9_fu_577_p1 + zext_ln1207_fu_567_p1);

assign add_ln1207_fu_561_p2 = (zext_ln1199_fu_545_p1 + zext_ln1199_13_fu_549_p1);

assign add_ln1233_fu_322_p2 = ($signed(hash_table_dout) + $signed(sext_ln1233_fu_318_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op408_read_state145 == 1'b1) & (m_axi_DB_aximm0_0_RVALID == 1'b0)) | ((ap_predicate_op407_read_state145 == 1'b1) & (m_axi_query_plram0_0_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op408_read_state145 == 1'b1) & (m_axi_DB_aximm0_0_RVALID == 1'b0)) | ((ap_predicate_op407_read_state145 == 1'b1) & (m_axi_query_plram0_0_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((backet_location_empty_n == 1'b0) | (query_empty_n == 1'b0) | (hash_table_empty_n == 1'b0) | (1'b0 == FP_DB_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state144_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state145_pp0_stage0_iter1 = (((ap_predicate_op408_read_state145 == 1'b1) & (m_axi_DB_aximm0_0_RVALID == 1'b0)) | ((ap_predicate_op407_read_state145 == 1'b1) & (m_axi_query_plram0_0_RVALID == 1'b0)));
end

assign ap_block_state146_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_query_plram0_0_ARREADY == 1'b0) | (m_axi_table_aximm1_0_ARREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_114_reg_262 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_115_reg_271 = 'bx;

always @ (*) begin
    ap_predicate_op407_read_state145 = ((icmp_ln1206_reg_670 == 1'd1) & (icmp_ln1201_reg_666 == 1'd0));
end

always @ (*) begin
    ap_predicate_op408_read_state145 = ((icmp_ln1206_reg_670 == 1'd1) & (icmp_ln1201_reg_666 == 1'd0));
end

assign haming_dis_5_fu_591_p2 = (haming_dis_reg_226 + zext_ln1207_10_fu_587_p1);

assign icmp_ln1201_fu_423_p2 = ((indvar_i_i_reg_215 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln1206_fu_433_p2 = ((trunc_ln1201_fu_429_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln1230_fu_304_p2 = ((p_read < 7'd25) ? 1'b1 : 1'b0);

assign icmp_ln1246_fu_601_p2 = ((haming_dis_reg_226 > min_haming_dis_i_i_constprop_i) ? 1'b1 : 1'b0);

assign m_axi_DB_aximm0_0_ARADDR = sext_ln1201_5_fu_404_p1;

assign m_axi_DB_aximm0_0_ARBURST = 2'd0;

assign m_axi_DB_aximm0_0_ARCACHE = 4'd0;

assign m_axi_DB_aximm0_0_ARID = 1'd0;

assign m_axi_DB_aximm0_0_ARLEN = 32'd8;

assign m_axi_DB_aximm0_0_ARLOCK = 2'd0;

assign m_axi_DB_aximm0_0_ARPROT = 3'd0;

assign m_axi_DB_aximm0_0_ARQOS = 4'd0;

assign m_axi_DB_aximm0_0_ARREGION = 4'd0;

assign m_axi_DB_aximm0_0_ARSIZE = 3'd0;

assign m_axi_DB_aximm0_0_ARUSER = 1'd0;

assign m_axi_DB_aximm0_0_AWADDR = 64'd0;

assign m_axi_DB_aximm0_0_AWBURST = 2'd0;

assign m_axi_DB_aximm0_0_AWCACHE = 4'd0;

assign m_axi_DB_aximm0_0_AWID = 1'd0;

assign m_axi_DB_aximm0_0_AWLEN = 32'd0;

assign m_axi_DB_aximm0_0_AWLOCK = 2'd0;

assign m_axi_DB_aximm0_0_AWPROT = 3'd0;

assign m_axi_DB_aximm0_0_AWQOS = 4'd0;

assign m_axi_DB_aximm0_0_AWREGION = 4'd0;

assign m_axi_DB_aximm0_0_AWSIZE = 3'd0;

assign m_axi_DB_aximm0_0_AWUSER = 1'd0;

assign m_axi_DB_aximm0_0_AWVALID = 1'b0;

assign m_axi_DB_aximm0_0_BREADY = 1'b0;

assign m_axi_DB_aximm0_0_WDATA = 512'd0;

assign m_axi_DB_aximm0_0_WID = 1'd0;

assign m_axi_DB_aximm0_0_WLAST = 1'b0;

assign m_axi_DB_aximm0_0_WSTRB = 64'd0;

assign m_axi_DB_aximm0_0_WUSER = 1'd0;

assign m_axi_DB_aximm0_0_WVALID = 1'b0;

assign m_axi_query_plram0_0_ARADDR = sext_ln1201_fu_358_p1;

assign m_axi_query_plram0_0_ARBURST = 2'd0;

assign m_axi_query_plram0_0_ARCACHE = 4'd0;

assign m_axi_query_plram0_0_ARID = 1'd0;

assign m_axi_query_plram0_0_ARLEN = 32'd8;

assign m_axi_query_plram0_0_ARLOCK = 2'd0;

assign m_axi_query_plram0_0_ARPROT = 3'd0;

assign m_axi_query_plram0_0_ARQOS = 4'd0;

assign m_axi_query_plram0_0_ARREGION = 4'd0;

assign m_axi_query_plram0_0_ARSIZE = 3'd0;

assign m_axi_query_plram0_0_ARUSER = 1'd0;

assign m_axi_query_plram0_0_AWADDR = 64'd0;

assign m_axi_query_plram0_0_AWBURST = 2'd0;

assign m_axi_query_plram0_0_AWCACHE = 4'd0;

assign m_axi_query_plram0_0_AWID = 1'd0;

assign m_axi_query_plram0_0_AWLEN = 32'd0;

assign m_axi_query_plram0_0_AWLOCK = 2'd0;

assign m_axi_query_plram0_0_AWPROT = 3'd0;

assign m_axi_query_plram0_0_AWQOS = 4'd0;

assign m_axi_query_plram0_0_AWREGION = 4'd0;

assign m_axi_query_plram0_0_AWSIZE = 3'd0;

assign m_axi_query_plram0_0_AWUSER = 1'd0;

assign m_axi_query_plram0_0_AWVALID = 1'b0;

assign m_axi_query_plram0_0_BREADY = 1'b0;

assign m_axi_query_plram0_0_WDATA = 512'd0;

assign m_axi_query_plram0_0_WID = 1'd0;

assign m_axi_query_plram0_0_WLAST = 1'b0;

assign m_axi_query_plram0_0_WSTRB = 64'd0;

assign m_axi_query_plram0_0_WUSER = 1'd0;

assign m_axi_query_plram0_0_WVALID = 1'b0;

assign m_axi_table_aximm1_0_ARADDR = table_aximm1_0_addr_reg_622;

assign m_axi_table_aximm1_0_ARBURST = 2'd0;

assign m_axi_table_aximm1_0_ARCACHE = 4'd0;

assign m_axi_table_aximm1_0_ARID = 1'd0;

assign m_axi_table_aximm1_0_ARLEN = 32'd1;

assign m_axi_table_aximm1_0_ARLOCK = 2'd0;

assign m_axi_table_aximm1_0_ARPROT = 3'd0;

assign m_axi_table_aximm1_0_ARQOS = 4'd0;

assign m_axi_table_aximm1_0_ARREGION = 4'd0;

assign m_axi_table_aximm1_0_ARSIZE = 3'd0;

assign m_axi_table_aximm1_0_ARUSER = 1'd0;

assign m_axi_table_aximm1_0_AWADDR = 64'd0;

assign m_axi_table_aximm1_0_AWBURST = 2'd0;

assign m_axi_table_aximm1_0_AWCACHE = 4'd0;

assign m_axi_table_aximm1_0_AWID = 1'd0;

assign m_axi_table_aximm1_0_AWLEN = 32'd0;

assign m_axi_table_aximm1_0_AWLOCK = 2'd0;

assign m_axi_table_aximm1_0_AWPROT = 3'd0;

assign m_axi_table_aximm1_0_AWQOS = 4'd0;

assign m_axi_table_aximm1_0_AWREGION = 4'd0;

assign m_axi_table_aximm1_0_AWSIZE = 3'd0;

assign m_axi_table_aximm1_0_AWUSER = 1'd0;

assign m_axi_table_aximm1_0_AWVALID = 1'b0;

assign m_axi_table_aximm1_0_BREADY = 1'b0;

assign m_axi_table_aximm1_0_WDATA = 32'd0;

assign m_axi_table_aximm1_0_WID = 1'd0;

assign m_axi_table_aximm1_0_WLAST = 1'b0;

assign m_axi_table_aximm1_0_WSTRB = 4'd0;

assign m_axi_table_aximm1_0_WUSER = 1'd0;

assign m_axi_table_aximm1_0_WVALID = 1'b0;

assign reg_13_hd_cal32_fu_286_subfp1 = {{ap_phi_mux_empty_114_phi_fu_265_p4[63:32]}};

assign reg_13_hd_cal32_fu_286_subfp2 = {{ap_phi_mux_empty_115_phi_fu_274_p4[63:32]}};

assign reg_14_hd_cal32_fu_292_subfp1 = {{ap_phi_mux_empty_114_phi_fu_265_p4[95:64]}};

assign reg_14_hd_cal32_fu_292_subfp2 = {{ap_phi_mux_empty_115_phi_fu_274_p4[95:64]}};

assign reg_15_hd_cal32_fu_298_subfp1 = {{ap_phi_mux_empty_114_phi_fu_265_p4[127:96]}};

assign reg_15_hd_cal32_fu_298_subfp2 = {{ap_phi_mux_empty_115_phi_fu_274_p4[127:96]}};

assign reg_hd_cal32_fu_280_subfp1 = ap_phi_mux_empty_114_phi_fu_265_p4[31:0];

assign reg_hd_cal32_fu_280_subfp2 = ap_phi_mux_empty_115_phi_fu_274_p4[31:0];

assign sext_ln1201_5_fu_404_p1 = $signed(trunc_ln1201_9_reg_645);

assign sext_ln1201_fu_358_p1 = $signed(trunc_ln20_reg_628);

assign sext_ln1233_5_fu_338_p1 = $signed(trunc_ln_fu_328_p4);

assign sext_ln1233_fu_318_p1 = $signed(shl_ln_fu_310_p3);

assign shl_ln4_fu_378_p3 = {{trunc_ln19_reg_639}, {9'd0}};

assign shl_ln_fu_310_p3 = {{backet_location_dout}, {2'd0}};

assign trunc_ln1201_fu_429_p1 = indvar_i_i_reg_215[1:0];

assign trunc_ln_fu_328_p4 = {{add_ln1233_fu_322_p2[63:2]}};

assign zext_ln1199_13_fu_549_p1 = reg_13_hd_cal32_fu_286_ap_return;

assign zext_ln1199_14_fu_553_p1 = reg_14_hd_cal32_fu_292_ap_return;

assign zext_ln1199_15_fu_557_p1 = reg_15_hd_cal32_fu_298_ap_return;

assign zext_ln1199_fu_545_p1 = reg_hd_cal32_fu_280_ap_return;

assign zext_ln1201_10_fu_444_p1 = shiftreg_i_i_reg_238;

assign zext_ln1201_9_fu_439_p1 = shiftreg3_i_i_reg_250;

assign zext_ln1201_fu_385_p1 = shl_ln4_fu_378_p3;

assign zext_ln1207_10_fu_587_p1 = add_ln1207_14_fu_581_p2;

assign zext_ln1207_9_fu_577_p1 = add_ln1207_13_fu_571_p2;

assign zext_ln1207_fu_567_p1 = add_ln1207_fu_561_p2;

assign zext_ln1226_fu_414_p1 = trunc_ln19_reg_639;

always @ (posedge ap_clk) begin
    zext_ln1226_reg_656[25] <= 1'b0;
    music_index_temp_preg[25] <= 1'b0;
end

endmodule //table_serch_seisa_func14
